

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jul 19 23:44:36 2022

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    44                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4321 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	nvCOMRAM
    82  00007C                     __pnvCOMRAM:
    83                           	callstack 0
    84  00007C                     _signalPORT:
    85                           	callstack 0
    86  00007C                     	ds	2
    87  00007E                     __displayfunction:
    88                           	callstack 0
    89  00007E                     	ds	1
    90                           
    91                           	psect	nvBANK0
    92  0000F0                     __pnvBANK0:
    93                           	callstack 0
    94  0000F0                     _dataPORT:
    95                           	callstack 0
    96  0000F0                     	ds	2
    97  0000                     _PORTCbits	set	3970
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISA	set	3986
   100  0000                     _PORTD	set	3971
   101  0000                     _PORTA	set	3968
   102  0000                     _ADCON1	set	4033
   103                           
   104                           	psect	smallconst
   105  000200                     __psmallconst:
   106                           	callstack 0
   107  000200  00                 	db	0
   108  000201                     STR_1:
   109  000201  25                 	db	37
   110  000202  64                 	db	100	;'d'
   111  000203  00                 	db	0
   112  000204  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           ; #config settings
   115                           
   116                           	psect	cinit
   117  000EB0                     __pcinit:
   118                           	callstack 0
   119  000EB0                     start_initialization:
   120                           	callstack 0
   121  000EB0                     __initialization:
   122                           	callstack 0
   123                           
   124                           ; Clear objects allocated to BANK0 (32 bytes)
   125  000EB0  EE00  F0D0         	lfsr	0,__pbssBANK0
   126  000EB4  0E20               	movlw	32
   127  000EB6                     clear_0:
   128  000EB6  6AEE               	clrf	postinc0,c
   129  000EB8  06E8               	decf	wreg,f,c
   130  000EBA  E1FD               	bnz	clear_0
   131                           
   132                           ; Clear objects allocated to COMRAM (15 bytes)
   133  000EBC  EE00  F06D         	lfsr	0,__pbssCOMRAM
   134  000EC0  0E0F               	movlw	15
   135  000EC2                     clear_1:
   136  000EC2  6AEE               	clrf	postinc0,c
   137  000EC4  06E8               	decf	wreg,f,c
   138  000EC6  E1FD               	bnz	clear_1
   139  000EC8                     end_of_initialization:
   140                           	callstack 0
   141  000EC8                     __end_of__initialization:
   142                           	callstack 0
   143  000EC8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   144  000ECA  6EF8               	movwf	tblptru,c
   145  000ECC  0E02               	movlw	high __Lsmallconst
   146  000ECE  6EF7               	movwf	tblptrh,c
   147  000ED0  0100               	movlb	0
   148  000ED2  EFC1  F004         	goto	_main	;jump to C main() function
   149                           
   150                           	psect	bssCOMRAM
   151  00006D                     __pbssCOMRAM:
   152                           	callstack 0
   153  00006D                     __rowOffsets:
   154                           	callstack 0
   155  00006D                     	ds	4
   156  000071                     _nout:
   157                           	callstack 0
   158  000071                     	ds	2
   159  000073                     _width:
   160                           	callstack 0
   161  000073                     	ds	2
   162  000075                     _prec:
   163                           	callstack 0
   164  000075                     	ds	2
   165  000077                     _flags:
   166                           	callstack 0
   167  000077                     	ds	2
   168  000079                     __numlines:
   169                           	callstack 0
   170  000079                     	ds	1
   171  00007A                     __displaymode:
   172                           	callstack 0
   173  00007A                     	ds	1
   174  00007B                     __displaycontrol:
   175                           	callstack 0
   176  00007B                     	ds	1
   177                           
   178                           	psect	bssBANK0
   179  0000D0                     __pbssBANK0:
   180                           	callstack 0
   181  0000D0                     _dbuf:
   182                           	callstack 0
   183  0000D0                     	ds	32
   184                           
   185                           	psect	cstackBANK0
   186  000080                     __pcstackBANK0:
   187                           	callstack 0
   188  000080                     print_int@s_num:
   189                           	callstack 0
   190                           
   191                           ; 80 bytes @ 0x0
   192  000080                     	ds	80
   193                           
   194                           	psect	cstackCOMRAM
   195  000001                     __pcstackCOMRAM:
   196                           	callstack 0
   197  000001                     ?_strlen:
   198                           	callstack 0
   199  000001                     ?___aodiv:
   200                           	callstack 0
   201  000001                     ?___aomod:
   202                           	callstack 0
   203  000001                     setRowOffsets@row1:
   204                           	callstack 0
   205  000001                     write8bits@value:
   206                           	callstack 0
   207  000001                     pin_setup@dp:
   208                           	callstack 0
   209  000001                     fputc@c:
   210                           	callstack 0
   211  000001                     strlen@s:
   212                           	callstack 0
   213  000001                     ___aodiv@dividend:
   214                           	callstack 0
   215  000001                     ___aomod@dividend:
   216                           	callstack 0
   217                           
   218                           ; 8 bytes @ 0x0
   219  000001                     	ds	1
   220  000002                     setRowOffsets@row2:
   221                           	callstack 0
   222  000002                     send@mode:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0x1
   226  000002                     	ds	1
   227  000003                     setRowOffsets@row3:
   228                           	callstack 0
   229  000003                     send@value:
   230                           	callstack 0
   231  000003                     pin_setup@sp:
   232                           	callstack 0
   233  000003                     fputc@fp:
   234                           	callstack 0
   235  000003                     strlen@a:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0x2
   239  000003                     	ds	1
   240  000004                     setRowOffsets@row0:
   241                           	callstack 0
   242  000004                     sendData@value:
   243                           	callstack 0
   244  000004                     sendCommand@value:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x3
   248  000004                     	ds	1
   249  000005                     ??_fputc:
   250  000005                     begin@lines:
   251                           	callstack 0
   252  000005                     write@chr:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0x4
   256  000005                     	ds	1
   257  000006                     begin@dotsize:
   258                           	callstack 0
   259  000006                     print@chr:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x5
   263  000006                     	ds	1
   264  000007                     ??_begin:
   265                           
   266                           ; 1 bytes @ 0x6
   267  000007                     	ds	1
   268  000008                     begin@cols:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x7
   272  000008                     	ds	1
   273  000009                     ___aodiv@divisor:
   274                           	callstack 0
   275  000009                     ___aomod@divisor:
   276                           	callstack 0
   277                           
   278                           ; 8 bytes @ 0x8
   279  000009                     	ds	1
   280  00000A                     fputs@s:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x9
   284  00000A                     	ds	2
   285  00000C                     fputs@fp:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0xB
   289  00000C                     	ds	2
   290  00000E                     fputs@c:
   291                           	callstack 0
   292                           
   293                           ; 1 bytes @ 0xD
   294  00000E                     	ds	1
   295  00000F                     fputs@i:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0xE
   299  00000F                     	ds	2
   300  000011                     ?_pad:
   301                           	callstack 0
   302  000011                     ___aodiv@counter:
   303                           	callstack 0
   304  000011                     ___aomod@counter:
   305                           	callstack 0
   306  000011                     pad@fp:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x10
   310  000011                     	ds	1
   311  000012                     ___aodiv@sign:
   312                           	callstack 0
   313  000012                     ___aomod@sign:
   314                           	callstack 0
   315                           
   316                           ; 1 bytes @ 0x11
   317  000012                     	ds	1
   318  000013                     ?_abs:
   319                           	callstack 0
   320  000013                     pad@buf:
   321                           	callstack 0
   322  000013                     abs@a:
   323                           	callstack 0
   324  000013                     ___aodiv@quotient:
   325                           	callstack 0
   326                           
   327                           ; 8 bytes @ 0x12
   328  000013                     	ds	2
   329  000015                     ??_abs:
   330  000015                     pad@p:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x14
   334  000015                     	ds	2
   335  000017                     ??_pad:
   336                           
   337                           ; 1 bytes @ 0x16
   338  000017                     	ds	1
   339  000018                     pad@i:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x17
   343  000018                     	ds	2
   344  00001A                     pad@w:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x19
   348  00001A                     	ds	2
   349  00001C                     ?_dtoa:
   350                           	callstack 0
   351  00001C                     dtoa@fp:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x1B
   355  00001C                     	ds	2
   356  00001E                     dtoa@d:
   357                           	callstack 0
   358                           
   359                           ; 8 bytes @ 0x1D
   360  00001E                     	ds	8
   361  000026                     ??_dtoa:
   362                           
   363                           ; 1 bytes @ 0x25
   364  000026                     	ds	8
   365  00002E                     _dtoa$826:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x2D
   369  00002E                     	ds	2
   370  000030                     dtoa@p:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x2F
   374  000030                     	ds	2
   375  000032                     dtoa@w:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x31
   379  000032                     	ds	2
   380  000034                     dtoa@s:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x33
   384  000034                     	ds	2
   385  000036                     dtoa@n:
   386                           	callstack 0
   387                           
   388                           ; 8 bytes @ 0x35
   389  000036                     	ds	8
   390  00003E                     dtoa@i:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x3D
   394  00003E                     	ds	2
   395  000040                     ?_vfpfcnvrt:
   396                           	callstack 0
   397  000040                     vfpfcnvrt@fp:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0x3F
   401  000040                     	ds	2
   402  000042                     vfpfcnvrt@fmt:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x41
   406  000042                     	ds	2
   407  000044                     vfpfcnvrt@ap:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x43
   411  000044                     	ds	2
   412  000046                     ??_vfpfcnvrt:
   413                           
   414                           ; 1 bytes @ 0x45
   415  000046                     	ds	2
   416  000048                     vfpfcnvrt@ll:
   417                           	callstack 0
   418                           
   419                           ; 8 bytes @ 0x47
   420  000048                     	ds	8
   421  000050                     ?_vfprintf:
   422                           	callstack 0
   423  000050                     vfprintf@fp:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x4F
   427  000050                     	ds	2
   428  000052                     vfprintf@fmt:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x51
   432  000052                     	ds	2
   433  000054                     vfprintf@ap:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x53
   437  000054                     	ds	2
   438  000056                     vfprintf@cfmt:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x55
   442  000056                     	ds	2
   443  000058                     ?_sprintf:
   444                           	callstack 0
   445  000058                     sprintf@s:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x57
   449  000058                     	ds	2
   450  00005A                     sprintf@fmt:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x59
   454  00005A                     	ds	4
   455  00005E                     
   456                           ; 1 bytes @ 0x5D
   457  00005E                     	ds	2
   458  000060                     sprintf@ap:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x5F
   462  000060                     	ds	2
   463  000062                     sprintf@f:
   464                           	callstack 0
   465                           
   466                           ; 6 bytes @ 0x61
   467  000062                     	ds	6
   468  000068                     print_int@num:
   469                           	callstack 0
   470                           
   471                           ; 2 bytes @ 0x67
   472  000068                     	ds	2
   473  00006A                     ??_main:
   474                           
   475                           ; 1 bytes @ 0x69
   476  00006A                     	ds	1
   477  00006B                     main@n:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x6A
   481  00006B                     	ds	2
   482                           
   483 ;;
   484 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   485 ;;
   486 ;; *************** function _main *****************
   487 ;; Defined at:
   488 ;;		line 14 in file "buttondisplay.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  n               2  106[COMRAM] int 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  2   44[None  ] int 
   495 ;; Registers used:
   496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1
   502 ;;      Params:         0       0       0
   503 ;;      Locals:         2       0       0
   504 ;;      Temps:          1       0       0
   505 ;;      Totals:         3       0       0
   506 ;;Total ram usage:        3 bytes
   507 ;; Hardware stack levels required when called:    9
   508 ;; This function calls:
   509 ;;		_begin
   510 ;;		_clear
   511 ;;		_home
   512 ;;		_noAutoscroll
   513 ;;		_pin_setup
   514 ;;		_print_int
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text0
   521  000982                     __ptext0:
   522                           	callstack 0
   523  000982                     _main:
   524                           	callstack 22
   525  000982                     
   526                           ;buttondisplay.c: 18:     ADCON1 = 0x0f;
   527  000982  0E0F               	movlw	15
   528  000984  6EC1               	movwf	193,c	;volatile
   529                           
   530                           ;buttondisplay.c: 21:     TRISA = 0x00;
   531  000986  0E00               	movlw	0
   532  000988  6E92               	movwf	146,c	;volatile
   533                           
   534                           ;buttondisplay.c: 26:     TRISD = 0x00;
   535  00098A  0E00               	movlw	0
   536  00098C  6E95               	movwf	149,c	;volatile
   537  00098E                     
   538                           ;buttondisplay.c: 29:     pin_setup(&PORTA, &PORTD);
   539  00098E  0E80               	movlw	128
   540  000990  6E01               	movwf	pin_setup@dp^0,c
   541  000992  0E0F               	movlw	15
   542  000994  6E02               	movwf	(pin_setup@dp+1)^0,c
   543  000996  0E83               	movlw	131
   544  000998  6E03               	movwf	pin_setup@sp^0,c
   545  00099A  0E0F               	movlw	15
   546  00099C  6E04               	movwf	(pin_setup@sp+1)^0,c
   547  00099E  EC7F  F007         	call	_pin_setup	;wreg free
   548  0009A2                     
   549                           ;buttondisplay.c: 32:     begin(16, 2, 0x00);
   550  0009A2  0E02               	movlw	2
   551  0009A4  6E05               	movwf	begin@lines^0,c
   552  0009A6  0E00               	movlw	0
   553  0009A8  6E06               	movwf	begin@dotsize^0,c
   554  0009AA  0E10               	movlw	16
   555  0009AC  ECF2  F005         	call	_begin
   556  0009B0                     
   557                           ;buttondisplay.c: 35:    clear();
   558  0009B0  EC90  F007         	call	_clear	;wreg free
   559  0009B4                     
   560                           ;buttondisplay.c: 36:    noAutoscroll();
   561  0009B4  ECA6  F007         	call	_noAutoscroll	;wreg free
   562  0009B8                     
   563                           ;buttondisplay.c: 38:    int n = 0;
   564  0009B8  0E00               	movlw	0
   565  0009BA  6E6C               	movwf	(main@n+1)^0,c
   566  0009BC  0E00               	movlw	0
   567  0009BE  6E6B               	movwf	main@n^0,c
   568  0009C0                     l1800:
   569                           
   570                           ;buttondisplay.c: 40:     {;buttondisplay.c: 41:         if (PORTCbits.RC0 == 1)
   571  0009C0  A082               	btfss	130,0,c	;volatile
   572  0009C2  EFE5  F004         	goto	u1031
   573  0009C6  EFE7  F004         	goto	u1030
   574  0009CA                     u1031:
   575  0009CA  EFF9  F004         	goto	l1810
   576  0009CE                     u1030:
   577  0009CE                     
   578                           ;buttondisplay.c: 42:             {;buttondisplay.c: 43:             clear();
   579  0009CE  EC90  F007         	call	_clear	;wreg free
   580  0009D2                     
   581                           ;buttondisplay.c: 44:             n++;
   582  0009D2  4A6B               	infsnz	main@n^0,f,c
   583  0009D4  2A6C               	incf	(main@n+1)^0,f,c
   584  0009D6                     
   585                           ;buttondisplay.c: 45:             print_int(n);
   586  0009D6  C06B  F068         	movff	main@n,print_int@num
   587  0009DA  C06C  F069         	movff	main@n+1,print_int@num+1
   588  0009DE  EC2F  F007         	call	_print_int	;wreg free
   589  0009E2                     
   590                           ;buttondisplay.c: 46:             _delay((unsigned long)((50)*(1000000/4000.0)));
   591  0009E2  0E11               	movlw	17
   592  0009E4  6E6A               	movwf	??_main^0,c
   593  0009E6  0E3A               	movlw	58
   594  0009E8                     u1077:
   595  0009E8  2EE8               	decfsz	wreg,f,c
   596  0009EA  D7FE               	bra	u1077
   597  0009EC  2E6A               	decfsz	??_main^0,f,c
   598  0009EE  D7FC               	bra	u1077
   599  0009F0  D000               	nop2	
   600  0009F2                     l1810:
   601                           
   602                           ;buttondisplay.c: 48:         if (PORTCbits.RC1 == 1)
   603  0009F2  A282               	btfss	130,1,c	;volatile
   604  0009F4  EFFE  F004         	goto	u1041
   605  0009F8  EF00  F005         	goto	u1040
   606  0009FC                     u1041:
   607  0009FC  EF13  F005         	goto	l1820
   608  000A00                     u1040:
   609  000A00                     
   610                           ;buttondisplay.c: 49:             {;buttondisplay.c: 50:             clear();
   611  000A00  EC90  F007         	call	_clear	;wreg free
   612  000A04                     
   613                           ;buttondisplay.c: 51:             n--;
   614  000A04  066B               	decf	main@n^0,f,c
   615  000A06  A0D8               	btfss	status,0,c
   616  000A08  066C               	decf	(main@n+1)^0,f,c
   617  000A0A                     
   618                           ;buttondisplay.c: 52:             print_int(n);
   619  000A0A  C06B  F068         	movff	main@n,print_int@num
   620  000A0E  C06C  F069         	movff	main@n+1,print_int@num+1
   621  000A12  EC2F  F007         	call	_print_int	;wreg free
   622  000A16                     
   623                           ;buttondisplay.c: 53:                 _delay((unsigned long)((50)*(1000000/4000.0)));
   624  000A16  0E11               	movlw	17
   625  000A18  6E6A               	movwf	??_main^0,c
   626  000A1A  0E3A               	movlw	58
   627  000A1C                     u1087:
   628  000A1C  2EE8               	decfsz	wreg,f,c
   629  000A1E  D7FE               	bra	u1087
   630  000A20  2E6A               	decfsz	??_main^0,f,c
   631  000A22  D7FC               	bra	u1087
   632  000A24  D000               	nop2	
   633  000A26                     l1820:
   634                           
   635                           ;buttondisplay.c: 55:         if (PORTCbits.RC2 == 1)
   636  000A26  A482               	btfss	130,2,c	;volatile
   637  000A28  EF18  F005         	goto	u1051
   638  000A2C  EF1A  F005         	goto	u1050
   639  000A30                     u1051:
   640  000A30  EF26  F005         	goto	l1828
   641  000A34                     u1050:
   642  000A34                     
   643                           ;buttondisplay.c: 56:             {;buttondisplay.c: 57:             clear();
   644  000A34  EC90  F007         	call	_clear	;wreg free
   645  000A38                     
   646                           ;buttondisplay.c: 58:             n = 0;
   647  000A38  0E00               	movlw	0
   648  000A3A  6E6C               	movwf	(main@n+1)^0,c
   649  000A3C  0E00               	movlw	0
   650  000A3E  6E6B               	movwf	main@n^0,c
   651  000A40                     
   652                           ;buttondisplay.c: 59:             print_int(n);
   653  000A40  0E00               	movlw	0
   654  000A42  6E69               	movwf	(print_int@num+1)^0,c
   655  000A44  0E00               	movlw	0
   656  000A46  6E68               	movwf	print_int@num^0,c
   657  000A48  EC2F  F007         	call	_print_int	;wreg free
   658  000A4C                     l1828:
   659                           
   660                           ;buttondisplay.c: 60:             home();
   661  000A4C  EC88  F007         	call	_home	;wreg free
   662                           
   663                           ;buttondisplay.c: 61:             }
   664  000A50  EFE0  F004         	goto	l1800
   665  000A54  EF00  F000         	goto	start
   666  000A58                     __end_of_main:
   667                           	callstack 0
   668                           
   669 ;; *************** function _print_int *****************
   670 ;; Defined at:
   671 ;;		line 148 in file "LiquidCrystal.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  num             2  103[COMRAM] int 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  s_num          80    0[BANK0 ] unsigned char [80]
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1
   685 ;;      Params:         2       0       0
   686 ;;      Locals:         0      80       0
   687 ;;      Temps:          0       0       0
   688 ;;      Totals:         2      80       0
   689 ;;Total ram usage:       82 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    8
   692 ;; This function calls:
   693 ;;		_print
   694 ;;		_sprintf
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text1
   701  000E5E                     __ptext1:
   702                           	callstack 0
   703  000E5E                     _print_int:
   704                           	callstack 22
   705  000E5E                     
   706                           ;LiquidCrystal.c: 148:     void print_int(int num);LiquidCrystal.c: 149:     {;LiquidCry
      +                          stal.c: 150:         char s_num[80];;LiquidCrystal.c: 151:         sprintf(s_num, "%d", 
      +                          num);
   707  000E5E  0E80               	movlw	low print_int@s_num
   708  000E60  6E58               	movwf	sprintf@s^0,c
   709  000E62  0E00               	movlw	high print_int@s_num
   710  000E64  6E59               	movwf	(sprintf@s+1)^0,c
   711  000E66  0E01               	movlw	low STR_1
   712  000E68  6E5A               	movwf	sprintf@fmt^0,c
   713  000E6A  0E02               	movlw	high STR_1
   714  000E6C  6E5B               	movwf	(sprintf@fmt+1)^0,c
   715  000E6E  C068  F05C         	movff	print_int@num,?_sprintf+4
   716  000E72  C069  F05D         	movff	print_int@num+1,?_sprintf+5
   717  000E76  EC6E  F006         	call	_sprintf	;wreg free
   718  000E7A                     
   719                           ;LiquidCrystal.c: 153:         print(s_num);
   720  000E7A  0E80               	movlw	low print_int@s_num
   721  000E7C  6E06               	movwf	print@chr^0,c
   722  000E7E  0E00               	movlw	high print_int@s_num
   723  000E80  6E07               	movwf	(print@chr+1)^0,c
   724  000E82  EC17  F007         	call	_print	;wreg free
   725  000E86  0012               	return		;funcret
   726  000E88                     __end_of_print_int:
   727                           	callstack 0
   728                           
   729 ;; *************** function _sprintf *****************
   730 ;; Defined at:
   731 ;;		line 9 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/nf_sprintf.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  s               2   87[COMRAM] PTR unsigned char 
   734 ;;		 -> print_int@s_num(80), 
   735 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   736 ;;		 -> STR_1(3), 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  f               6   97[COMRAM] struct _IO_FILE
   739 ;;  ap              2   95[COMRAM] PTR void [1]
   740 ;;		 -> ?_sprintf(2), 
   741 ;;  ret             2    0        int 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  2   87[COMRAM] int 
   744 ;; Registers used:
   745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1
   751 ;;      Params:         6       0       0
   752 ;;      Locals:        10       0       0
   753 ;;      Temps:          0       0       0
   754 ;;      Totals:        16       0       0
   755 ;;Total ram usage:       16 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    7
   758 ;; This function calls:
   759 ;;		_vfprintf
   760 ;; This function is called by:
   761 ;;		_print_int
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text2
   766  000CDC                     __ptext2:
   767                           	callstack 0
   768  000CDC                     _sprintf:
   769                           	callstack 22
   770  000CDC  0E5C               	movlw	low (?_sprintf+4)
   771  000CDE  6E60               	movwf	sprintf@ap^0,c
   772  000CE0  0E00               	movlw	high (?_sprintf+4)
   773  000CE2  6E61               	movwf	(sprintf@ap+1)^0,c
   774  000CE4  C058  F062         	movff	sprintf@s,sprintf@f
   775  000CE8  C059  F063         	movff	sprintf@s+1,sprintf@f+1
   776  000CEC  0E00               	movlw	0
   777  000CEE  6E65               	movwf	(sprintf@f+3)^0,c
   778  000CF0  0E00               	movlw	0
   779  000CF2  6E64               	movwf	(sprintf@f+2)^0,c
   780  000CF4  0E00               	movlw	0
   781  000CF6  6E67               	movwf	(sprintf@f+5)^0,c
   782  000CF8  0E00               	movlw	0
   783  000CFA  6E66               	movwf	(sprintf@f+4)^0,c
   784  000CFC  0E62               	movlw	low sprintf@f
   785  000CFE  6E50               	movwf	vfprintf@fp^0,c
   786  000D00  0E00               	movlw	high sprintf@f
   787  000D02  6E51               	movwf	(vfprintf@fp+1)^0,c
   788  000D04  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   789  000D08  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   790  000D0C  0E60               	movlw	low sprintf@ap
   791  000D0E  6E54               	movwf	vfprintf@ap^0,c
   792  000D10  0E00               	movlw	high sprintf@ap
   793  000D12  6E55               	movwf	(vfprintf@ap+1)^0,c
   794  000D14  EC3F  F006         	call	_vfprintf	;wreg free
   795  000D18  5064               	movf	(sprintf@f+2)^0,w,c
   796  000D1A  2458               	addwf	sprintf@s^0,w,c
   797  000D1C  6ED9               	movwf	fsr2l,c
   798  000D1E  5065               	movf	(sprintf@f+3)^0,w,c
   799  000D20  2059               	addwfc	(sprintf@s+1)^0,w,c
   800  000D22  6EDA               	movwf	fsr2h,c
   801  000D24  0E00               	movlw	0
   802  000D26  6EDF               	movwf	indf2,c
   803  000D28  0012               	return		;funcret
   804  000D2A                     __end_of_sprintf:
   805                           	callstack 0
   806                           
   807 ;; *************** function _vfprintf *****************
   808 ;; Defined at:
   809 ;;		line 1368 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   812 ;;		 -> sprintf@f(6), 
   813 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   814 ;;		 -> STR_1(3), 
   815 ;;  ap              2   83[COMRAM] PTR PTR void 
   816 ;;		 -> sprintf@ap(2), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   819 ;;		 -> STR_1(3), 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  2   79[COMRAM] int 
   822 ;; Registers used:
   823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1
   829 ;;      Params:         6       0       0
   830 ;;      Locals:         2       0       0
   831 ;;      Temps:          0       0       0
   832 ;;      Totals:         8       0       0
   833 ;;Total ram usage:        8 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    6
   836 ;; This function calls:
   837 ;;		_vfpfcnvrt
   838 ;; This function is called by:
   839 ;;		_sprintf
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text3
   844  000C7E                     __ptext3:
   845                           	callstack 0
   846  000C7E                     _vfprintf:
   847                           	callstack 22
   848  000C7E                     
   849                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.20/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
   850  000C7E  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   851  000C82  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   852  000C86                     
   853                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
   854  000C86  0E00               	movlw	0
   855  000C88  6E72               	movwf	(_nout+1)^0,c
   856  000C8A  0E00               	movlw	0
   857  000C8C  6E71               	movwf	_nout^0,c
   858                           
   859                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
   860  000C8E  EF5B  F006         	goto	l1696
   861  000C92                     l1694:
   862                           
   863                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
   864  000C92  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   865  000C96  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   866  000C9A  0E56               	movlw	low vfprintf@cfmt
   867  000C9C  6E42               	movwf	vfpfcnvrt@fmt^0,c
   868  000C9E  0E00               	movlw	high vfprintf@cfmt
   869  000CA0  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   870  000CA2  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   871  000CA6  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   872  000CAA  EC72  F002         	call	_vfpfcnvrt	;wreg free
   873  000CAE  5040               	movf	?_vfpfcnvrt^0,w,c
   874  000CB0  2671               	addwf	_nout^0,f,c
   875  000CB2  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   876  000CB4  2272               	addwfc	(_nout+1)^0,f,c
   877  000CB6                     l1696:
   878                           
   879                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
   880  000CB6  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   881  000CBA  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   882  000CBE                     	if	0	;tblptru may be non-zero
   883  000CBE                     	endif
   884  000CBE                     	if	0	;tblptru may be non-zero
   885  000CBE                     	endif
   886  000CBE  0008               	tblrd		*
   887  000CC0  50F5               	movf	tablat,w,c
   888  000CC2  0900               	iorlw	0
   889  000CC4  A4D8               	btfss	status,2,c
   890  000CC6  EF67  F006         	goto	u991
   891  000CCA  EF69  F006         	goto	u990
   892  000CCE                     u991:
   893  000CCE  EF49  F006         	goto	l1694
   894  000CD2                     u990:
   895  000CD2                     
   896                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
   897  000CD2  C071  F050         	movff	_nout,?_vfprintf
   898  000CD6  C072  F051         	movff	_nout+1,?_vfprintf+1
   899  000CDA  0012               	return		;funcret
   900  000CDC                     __end_of_vfprintf:
   901                           	callstack 0
   902                           
   903 ;; *************** function _vfpfcnvrt *****************
   904 ;; Defined at:
   905 ;;		line 670 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   908 ;;		 -> sprintf@f(6), 
   909 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   910 ;;		 -> vfprintf@cfmt(2), 
   911 ;;  ap              2   67[COMRAM] PTR PTR void 
   912 ;;		 -> sprintf@ap(2), 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  ll              8   71[COMRAM] long long 
   915 ;;  llu             8    0        unsigned long long 
   916 ;;  f               4    0        unsigned long long 
   917 ;;  vp              3    0        PTR void 
   918 ;;  ct              3    0        unsigned char [3]
   919 ;;  cp              3    0        PTR unsigned char 
   920 ;;  i               2    0        int 
   921 ;;  done            2    0        int 
   922 ;;  c               1    0        unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2   63[COMRAM] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1
   932 ;;      Params:         6       0       0
   933 ;;      Locals:         8       0       0
   934 ;;      Temps:          2       0       0
   935 ;;      Totals:        16       0       0
   936 ;;Total ram usage:       16 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    5
   939 ;; This function calls:
   940 ;;		_dtoa
   941 ;;		_fputc
   942 ;; This function is called by:
   943 ;;		_vfprintf
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text4
   948  0004E4                     __ptext4:
   949                           	callstack 0
   950  0004E4                     _vfpfcnvrt:
   951                           	callstack 22
   952  0004E4                     
   953                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.20/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.20/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.20/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.20/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
   954  0004E4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   955  0004E8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   956  0004EC  CFDE FFF6          	movff	postinc2,tblptrl
   957  0004F0  CFDD FFF7          	movff	postdec2,tblptrh
   958  0004F4                     	if	0	;tblptru may be non-zero
   959  0004F4                     	endif
   960  0004F4                     	if	0	;tblptru may be non-zero
   961  0004F4                     	endif
   962  0004F4  0008               	tblrd		*
   963  0004F6  50F5               	movf	tablat,w,c
   964  0004F8  0A25               	xorlw	37
   965  0004FA  A4D8               	btfss	status,2,c
   966  0004FC  EF82  F002         	goto	u951
   967  000500  EF84  F002         	goto	u950
   968  000504                     u951:
   969  000504  EF2F  F003         	goto	l1678
   970  000508                     u950:
   971  000508                     
   972                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
   973  000508  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   974  00050C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   975  000510  2ADE               	incf	postinc2,f,c
   976  000512  0E00               	movlw	0
   977  000514  22DD               	addwfc	postdec2,f,c
   978  000516                     
   979                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
   980  000516  0E00               	movlw	0
   981  000518  6E74               	movwf	(_width+1)^0,c
   982  00051A  0E00               	movlw	0
   983  00051C  6E73               	movwf	_width^0,c
   984  00051E  C073  F077         	movff	_width,_flags
   985  000522  C074  F078         	movff	_width+1,_flags+1
   986  000526                     
   987                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
   988  000526  6875               	setf	_prec^0,c
   989  000528  6876               	setf	(_prec+1)^0,c
   990  00052A                     
   991                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
   992  00052A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   993  00052E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   994  000532  CFDE FFF6          	movff	postinc2,tblptrl
   995  000536  CFDD FFF7          	movff	postdec2,tblptrh
   996  00053A                     	if	0	;tblptru may be non-zero
   997  00053A                     	endif
   998  00053A                     	if	0	;tblptru may be non-zero
   999  00053A                     	endif
  1000  00053A  0008               	tblrd		*
  1001  00053C  50F5               	movf	tablat,w,c
  1002  00053E  0A64               	xorlw	100
  1003  000540  B4D8               	btfsc	status,2,c
  1004  000542  EFA5  F002         	goto	u961
  1005  000546  EFA7  F002         	goto	u960
  1006  00054A                     u961:
  1007  00054A  EFB9  F002         	goto	l1656
  1008  00054E                     u960:
  1009  00054E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1010  000552  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1011  000556  CFDE FFF6          	movff	postinc2,tblptrl
  1012  00055A  CFDD FFF7          	movff	postdec2,tblptrh
  1013  00055E                     	if	0	;tblptru may be non-zero
  1014  00055E                     	endif
  1015  00055E                     	if	0	;tblptru may be non-zero
  1016  00055E                     	endif
  1017  00055E  0008               	tblrd		*
  1018  000560  50F5               	movf	tablat,w,c
  1019  000562  0A69               	xorlw	105
  1020  000564  A4D8               	btfss	status,2,c
  1021  000566  EFB7  F002         	goto	u971
  1022  00056A  EFB9  F002         	goto	u970
  1023  00056E                     u971:
  1024  00056E  EFF9  F002         	goto	l1662
  1025  000572                     u970:
  1026  000572                     l1656:
  1027                           
  1028                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  1029  000572  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1030  000576  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1031  00057A  2ADE               	incf	postinc2,f,c
  1032  00057C  0E00               	movlw	0
  1033  00057E  22DD               	addwfc	postdec2,f,c
  1034                           
  1035                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1036  000580  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1037  000584  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1038  000588  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1039  00058C  0E02               	movlw	2
  1040  00058E  26DE               	addwf	postinc2,f,c
  1041  000590  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1042  000594  0E00               	movlw	0
  1043  000596  22DD               	addwfc	postdec2,f,c
  1044  000598  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1045  00059C  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1046  0005A0  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1047  0005A4  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1048  0005A8  0E00               	movlw	0
  1049  0005AA  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1050  0005AC  0EFF               	movlw	-1
  1051  0005AE  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1052  0005B0  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1053  0005B2  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1054  0005B4  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1055  0005B6  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1056  0005B8  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1057  0005BA                     
  1058                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  1059  0005BA  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1060  0005BE  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1061  0005C2  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1062  0005C6  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1063  0005CA  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1064  0005CE  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1065  0005D2  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1066  0005D6  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1067  0005DA  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1068  0005DE  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1069  0005E2  EC03  F001         	call	_dtoa	;wreg free
  1070  0005E6  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1071  0005EA  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1072  0005EE  EF4A  F003         	goto	l921
  1073  0005F2                     l1662:
  1074                           
  1075                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  1076  0005F2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1077  0005F6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1078  0005FA  CFDE FFF6          	movff	postinc2,tblptrl
  1079  0005FE  CFDD FFF7          	movff	postdec2,tblptrh
  1080  000602                     	if	0	;tblptru may be non-zero
  1081  000602                     	endif
  1082  000602                     	if	0	;tblptru may be non-zero
  1083  000602                     	endif
  1084  000602  0008               	tblrd		*
  1085  000604  50F5               	movf	tablat,w,c
  1086  000606  0A25               	xorlw	37
  1087  000608  A4D8               	btfss	status,2,c
  1088  00060A  EF09  F003         	goto	u981
  1089  00060E  EF0B  F003         	goto	u980
  1090  000612                     u981:
  1091  000612  EF22  F003         	goto	l1672
  1092  000616                     u980:
  1093  000616                     
  1094                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  1095  000616  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1096  00061A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1097  00061E  2ADE               	incf	postinc2,f,c
  1098  000620  0E00               	movlw	0
  1099  000622  22DD               	addwfc	postdec2,f,c
  1100  000624                     
  1101                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  1102  000624  0E00               	movlw	0
  1103  000626  6E02               	movwf	(fputc@c+1)^0,c
  1104  000628  0E25               	movlw	37
  1105  00062A  6E01               	movwf	fputc@c^0,c
  1106  00062C  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1107  000630  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1108  000634  EC2C  F005         	call	_fputc	;wreg free
  1109  000638                     l1668:
  1110                           
  1111                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  1112  000638  0E00               	movlw	0
  1113  00063A  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1114  00063C  0E01               	movlw	1
  1115  00063E  6E40               	movwf	?_vfpfcnvrt^0,c
  1116  000640  EF4A  F003         	goto	l921
  1117  000644                     l1672:
  1118                           
  1119                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  1120  000644  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1121  000648  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1122  00064C  2ADE               	incf	postinc2,f,c
  1123  00064E  0E00               	movlw	0
  1124  000650  22DD               	addwfc	postdec2,f,c
  1125  000652                     
  1126                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  1127  000652  0E00               	movlw	0
  1128  000654  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1129  000656  0E00               	movlw	0
  1130  000658  6E40               	movwf	?_vfpfcnvrt^0,c
  1131  00065A  EF4A  F003         	goto	l921
  1132  00065E                     l1678:
  1133                           
  1134                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  1135  00065E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1136  000662  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1137  000666  CFDE FFF6          	movff	postinc2,tblptrl
  1138  00066A  CFDD FFF7          	movff	postdec2,tblptrh
  1139  00066E                     	if	0	;tblptru may be non-zero
  1140  00066E                     	endif
  1141  00066E                     	if	0	;tblptru may be non-zero
  1142  00066E                     	endif
  1143  00066E  0008               	tblrd		*
  1144  000670  50F5               	movf	tablat,w,c
  1145  000672  6E01               	movwf	fputc@c^0,c
  1146  000674  6A02               	clrf	(fputc@c+1)^0,c
  1147  000676  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1148  00067A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1149  00067E  EC2C  F005         	call	_fputc	;wreg free
  1150  000682                     
  1151                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  1152  000682  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1153  000686  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1154  00068A  2ADE               	incf	postinc2,f,c
  1155  00068C  0E00               	movlw	0
  1156  00068E  22DD               	addwfc	postdec2,f,c
  1157  000690  EF1C  F003         	goto	l1668
  1158  000694                     l921:
  1159  000694  0012               	return		;funcret
  1160  000696                     __end_of_vfpfcnvrt:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _dtoa *****************
  1164 ;; Defined at:
  1165 ;;		line 274 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1168 ;;		 -> sprintf@f(6), 
  1169 ;;  d               8   29[COMRAM] long long 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  n               8   53[COMRAM] long long 
  1172 ;;  i               2   61[COMRAM] int 
  1173 ;;  s               2   51[COMRAM] int 
  1174 ;;  w               2   49[COMRAM] int 
  1175 ;;  p               2   47[COMRAM] int 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  2   27[COMRAM] int 
  1178 ;; Registers used:
  1179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1
  1185 ;;      Params:        10       0       0
  1186 ;;      Locals:        18       0       0
  1187 ;;      Temps:          8       0       0
  1188 ;;      Totals:        36       0       0
  1189 ;;Total ram usage:       36 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    4
  1192 ;; This function calls:
  1193 ;;		___aodiv
  1194 ;;		___aomod
  1195 ;;		_abs
  1196 ;;		_pad
  1197 ;; This function is called by:
  1198 ;;		_vfpfcnvrt
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text5
  1203  000206                     __ptext5:
  1204                           	callstack 0
  1205  000206                     _dtoa:
  1206                           	callstack 22
  1207  000206                     
  1208                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  1209  000206  C01E  F036         	movff	dtoa@d,dtoa@n
  1210  00020A  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1211  00020E  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1212  000212  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1213  000216  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1214  00021A  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1215  00021E  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1216  000222  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1217  000226                     
  1218                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  1219  000226  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1220  000228  EF18  F001         	goto	u801
  1221  00022C  EF1B  F001         	goto	u800
  1222  000230                     u801:
  1223  000230  0E01               	movlw	1
  1224  000232  EF1C  F001         	goto	u810
  1225  000236                     u800:
  1226  000236  0E00               	movlw	0
  1227  000238                     u810:
  1228  000238  6E34               	movwf	dtoa@s^0,c
  1229  00023A  6A35               	clrf	(dtoa@s+1)^0,c
  1230                           
  1231                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  1232  00023C  5034               	movf	dtoa@s^0,w,c
  1233  00023E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1234  000240  B4D8               	btfsc	status,2,c
  1235  000242  EF25  F001         	goto	u821
  1236  000246  EF27  F001         	goto	u820
  1237  00024A                     u821:
  1238  00024A  EF37  F001         	goto	l1586
  1239  00024E                     u820:
  1240  00024E                     
  1241                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  1242  00024E  1E3D               	comf	(dtoa@n+7)^0,f,c
  1243  000250  1E3C               	comf	(dtoa@n+6)^0,f,c
  1244  000252  1E3B               	comf	(dtoa@n+5)^0,f,c
  1245  000254  1E3A               	comf	(dtoa@n+4)^0,f,c
  1246  000256  1E39               	comf	(dtoa@n+3)^0,f,c
  1247  000258  1E38               	comf	(dtoa@n+2)^0,f,c
  1248  00025A  1E37               	comf	(dtoa@n+1)^0,f,c
  1249  00025C  6C36               	negf	dtoa@n^0,c
  1250  00025E  0E00               	movlw	0
  1251  000260  2237               	addwfc	(dtoa@n+1)^0,f,c
  1252  000262  2238               	addwfc	(dtoa@n+2)^0,f,c
  1253  000264  2239               	addwfc	(dtoa@n+3)^0,f,c
  1254  000266  223A               	addwfc	(dtoa@n+4)^0,f,c
  1255  000268  223B               	addwfc	(dtoa@n+5)^0,f,c
  1256  00026A  223C               	addwfc	(dtoa@n+6)^0,f,c
  1257  00026C  223D               	addwfc	(dtoa@n+7)^0,f,c
  1258  00026E                     l1586:
  1259                           
  1260                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  1261  00026E  BE76               	btfsc	(_prec+1)^0,7,c
  1262  000270  EF3C  F001         	goto	u831
  1263  000274  EF3E  F001         	goto	u830
  1264  000278                     u831:
  1265  000278  EF3F  F001         	goto	l1590
  1266  00027C                     u830:
  1267  00027C                     
  1268                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  1269  00027C  9277               	bcf	_flags^0,1,c
  1270  00027E                     l1590:
  1271                           
  1272                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  1273  00027E  BE76               	btfsc	(_prec+1)^0,7,c
  1274  000280  EF4C  F001         	goto	u840
  1275  000284  5076               	movf	(_prec+1)^0,w,c
  1276  000286  E106               	bnz	u841
  1277  000288  0475               	decf	_prec^0,w,c
  1278  00028A  B0D8               	btfsc	status,0,c
  1279  00028C  EF4A  F001         	goto	u841
  1280  000290  EF4C  F001         	goto	u840
  1281  000294                     u841:
  1282  000294  EF52  F001         	goto	l894
  1283  000298                     u840:
  1284  000298  0E00               	movlw	0
  1285  00029A  6E31               	movwf	(dtoa@p+1)^0,c
  1286  00029C  0E01               	movlw	1
  1287  00029E  6E30               	movwf	dtoa@p^0,c
  1288  0002A0  EF56  F001         	goto	l896
  1289  0002A4                     l894:
  1290  0002A4  C075  F030         	movff	_prec,dtoa@p
  1291  0002A8  C076  F031         	movff	_prec+1,dtoa@p+1
  1292  0002AC                     l896:
  1293                           
  1294                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 291:     w = width;
  1295  0002AC  C073  F032         	movff	_width,dtoa@w
  1296  0002B0  C074  F033         	movff	_width+1,dtoa@w+1
  1297  0002B4                     
  1298                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  1299  0002B4  5034               	movf	dtoa@s^0,w,c
  1300  0002B6  1035               	iorwf	(dtoa@s+1)^0,w,c
  1301  0002B8  A4D8               	btfss	status,2,c
  1302  0002BA  EF61  F001         	goto	u851
  1303  0002BE  EF63  F001         	goto	u850
  1304  0002C2                     u851:
  1305  0002C2  EF6A  F001         	goto	l1598
  1306  0002C6                     u850:
  1307  0002C6  A477               	btfss	_flags^0,2,c
  1308  0002C8  EF68  F001         	goto	u861
  1309  0002CC  EF6A  F001         	goto	u860
  1310  0002D0                     u861:
  1311  0002D0  EF6D  F001         	goto	l1600
  1312  0002D4                     u860:
  1313  0002D4                     l1598:
  1314                           
  1315                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 293:         --w;
  1316  0002D4  0632               	decf	dtoa@w^0,f,c
  1317  0002D6  A0D8               	btfss	status,0,c
  1318  0002D8  0633               	decf	(dtoa@w+1)^0,f,c
  1319  0002DA                     l1600:
  1320                           
  1321                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  1322  0002DA  0E00               	movlw	0
  1323  0002DC  6E3F               	movwf	(dtoa@i+1)^0,c
  1324  0002DE  0E1F               	movlw	31
  1325  0002E0  6E3E               	movwf	dtoa@i^0,c
  1326  0002E2                     
  1327                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  1328  0002E2  0E00               	movlw	0
  1329  0002E4  0100               	movlb	0	; () banked
  1330  0002E6  6FEF               	movwf	(_dbuf+31)& (0+255),b
  1331                           
  1332                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1333  0002E8  EFF2  F001         	goto	l1614
  1334  0002EC                     l1604:
  1335                           
  1336                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 300:         --i;
  1337  0002EC  063E               	decf	dtoa@i^0,f,c
  1338  0002EE  A0D8               	btfss	status,0,c
  1339  0002F0  063F               	decf	(dtoa@i+1)^0,f,c
  1340  0002F2                     
  1341                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  1342  0002F2  0ED0               	movlw	low _dbuf
  1343  0002F4  243E               	addwf	dtoa@i^0,w,c
  1344  0002F6  6ED9               	movwf	fsr2l,c
  1345  0002F8  0E00               	movlw	high _dbuf
  1346  0002FA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1347  0002FC  6EDA               	movwf	fsr2h,c
  1348  0002FE  C036  F001         	movff	dtoa@n,___aomod@dividend
  1349  000302  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1350  000306  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1351  00030A  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1352  00030E  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1353  000312  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1354  000316  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1355  00031A  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1356  00031E  0E0A               	movlw	10
  1357  000320  6E09               	movwf	___aomod@divisor^0,c
  1358  000322  0E00               	movlw	0
  1359  000324  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1360  000326  0E00               	movlw	0
  1361  000328  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1362  00032A  0E00               	movlw	0
  1363  00032C  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1364  00032E  0E00               	movlw	0
  1365  000330  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1366  000332  0E00               	movlw	0
  1367  000334  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1368  000336  0E00               	movlw	0
  1369  000338  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1370  00033A  0E00               	movlw	0
  1371  00033C  6E10               	movwf	(___aomod@divisor+7)^0,c
  1372  00033E  EC0F  F004         	call	___aomod	;wreg free
  1373  000342  C001  F026         	movff	?___aomod,??_dtoa
  1374  000346  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1375  00034A  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1376  00034E  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1377  000352  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1378  000356  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1379  00035A  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1380  00035E  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1381  000362  C026  F013         	movff	??_dtoa,abs@a
  1382  000366  C028  F014         	movff	??_dtoa+2,abs@a+1
  1383  00036A  ECDC  F006         	call	_abs	;wreg free
  1384  00036E  5013               	movf	?_abs^0,w,c
  1385  000370  0F30               	addlw	48
  1386  000372  6EDF               	movwf	indf2,c
  1387  000374                     
  1388                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 302:         --p;
  1389  000374  0630               	decf	dtoa@p^0,f,c
  1390  000376  A0D8               	btfss	status,0,c
  1391  000378  0631               	decf	(dtoa@p+1)^0,f,c
  1392  00037A                     
  1393                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 303:         --w;
  1394  00037A  0632               	decf	dtoa@w^0,f,c
  1395  00037C  A0D8               	btfss	status,0,c
  1396  00037E  0633               	decf	(dtoa@w+1)^0,f,c
  1397  000380                     
  1398                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  1399  000380  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1400  000384  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1401  000388  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1402  00038C  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1403  000390  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1404  000394  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1405  000398  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1406  00039C  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1407  0003A0  0E0A               	movlw	10
  1408  0003A2  6E09               	movwf	___aodiv@divisor^0,c
  1409  0003A4  0E00               	movlw	0
  1410  0003A6  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1411  0003A8  0E00               	movlw	0
  1412  0003AA  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1413  0003AC  0E00               	movlw	0
  1414  0003AE  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1415  0003B0  0E00               	movlw	0
  1416  0003B2  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1417  0003B4  0E00               	movlw	0
  1418  0003B6  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1419  0003B8  0E00               	movlw	0
  1420  0003BA  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1421  0003BC  0E00               	movlw	0
  1422  0003BE  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1423  0003C0  EC4B  F003         	call	___aodiv	;wreg free
  1424  0003C4  C001  F036         	movff	?___aodiv,dtoa@n
  1425  0003C8  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1426  0003CC  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1427  0003D0  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1428  0003D4  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1429  0003D8  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1430  0003DC  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1431  0003E0  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1432  0003E4                     l1614:
  1433                           
  1434                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1435  0003E4  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1436  0003E6  EFFD  F001         	goto	u871
  1437  0003EA  503F               	movf	(dtoa@i+1)^0,w,c
  1438  0003EC  E108               	bnz	u870
  1439  0003EE  043E               	decf	dtoa@i^0,w,c
  1440  0003F0  A0D8               	btfss	status,0,c
  1441  0003F2  EFFD  F001         	goto	u871
  1442  0003F6  EFFF  F001         	goto	u870
  1443  0003FA                     u871:
  1444  0003FA  EF2F  F002         	goto	l1624
  1445  0003FE                     u870:
  1446  0003FE  5036               	movf	dtoa@n^0,w,c
  1447  000400  1037               	iorwf	(dtoa@n+1)^0,w,c
  1448  000402  1038               	iorwf	(dtoa@n+2)^0,w,c
  1449  000404  1039               	iorwf	(dtoa@n+3)^0,w,c
  1450  000406  103A               	iorwf	(dtoa@n+4)^0,w,c
  1451  000408  103B               	iorwf	(dtoa@n+5)^0,w,c
  1452  00040A  103C               	iorwf	(dtoa@n+6)^0,w,c
  1453  00040C  103D               	iorwf	(dtoa@n+7)^0,w,c
  1454  00040E  A4D8               	btfss	status,2,c
  1455  000410  EF0C  F002         	goto	u881
  1456  000414  EF0E  F002         	goto	u880
  1457  000418                     u881:
  1458  000418  EF76  F001         	goto	l1604
  1459  00041C                     u880:
  1460  00041C  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1461  00041E  EF1B  F002         	goto	u890
  1462  000422  5031               	movf	(dtoa@p+1)^0,w,c
  1463  000424  E106               	bnz	u891
  1464  000426  0430               	decf	dtoa@p^0,w,c
  1465  000428  B0D8               	btfsc	status,0,c
  1466  00042A  EF19  F002         	goto	u891
  1467  00042E  EF1B  F002         	goto	u890
  1468  000432                     u891:
  1469  000432  EF76  F001         	goto	l1604
  1470  000436                     u890:
  1471  000436  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1472  000438  EF26  F002         	goto	u901
  1473  00043C  5033               	movf	(dtoa@w+1)^0,w,c
  1474  00043E  E108               	bnz	u900
  1475  000440  0432               	decf	dtoa@w^0,w,c
  1476  000442  A0D8               	btfss	status,0,c
  1477  000444  EF26  F002         	goto	u901
  1478  000448  EF28  F002         	goto	u900
  1479  00044C                     u901:
  1480  00044C  EF2F  F002         	goto	l1624
  1481  000450                     u900:
  1482  000450  B277               	btfsc	_flags^0,1,c
  1483  000452  EF2D  F002         	goto	u911
  1484  000456  EF2F  F002         	goto	u910
  1485  00045A                     u911:
  1486  00045A  EF76  F001         	goto	l1604
  1487  00045E                     u910:
  1488  00045E                     l1624:
  1489                           
  1490                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  1491  00045E  5034               	movf	dtoa@s^0,w,c
  1492  000460  1035               	iorwf	(dtoa@s+1)^0,w,c
  1493  000462  A4D8               	btfss	status,2,c
  1494  000464  EF36  F002         	goto	u921
  1495  000468  EF38  F002         	goto	u920
  1496  00046C                     u921:
  1497  00046C  EF3F  F002         	goto	l1628
  1498  000470                     u920:
  1499  000470  A477               	btfss	_flags^0,2,c
  1500  000472  EF3D  F002         	goto	u931
  1501  000476  EF3F  F002         	goto	u930
  1502  00047A                     u931:
  1503  00047A  EF5D  F002         	goto	l1638
  1504  00047E                     u930:
  1505  00047E                     l1628:
  1506                           
  1507                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 309:         --i;
  1508  00047E  063E               	decf	dtoa@i^0,f,c
  1509  000480  A0D8               	btfss	status,0,c
  1510  000482  063F               	decf	(dtoa@i+1)^0,f,c
  1511  000484                     
  1512                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  1513  000484  5034               	movf	dtoa@s^0,w,c
  1514  000486  1035               	iorwf	(dtoa@s+1)^0,w,c
  1515  000488  A4D8               	btfss	status,2,c
  1516  00048A  EF49  F002         	goto	u941
  1517  00048E  EF4B  F002         	goto	u940
  1518  000492                     u941:
  1519  000492  EF51  F002         	goto	l1634
  1520  000496                     u940:
  1521  000496  0E00               	movlw	0
  1522  000498  6E2F               	movwf	(_dtoa$826+1)^0,c
  1523  00049A  0E2B               	movlw	43
  1524  00049C  6E2E               	movwf	_dtoa$826^0,c
  1525  00049E  EF55  F002         	goto	l1636
  1526  0004A2                     l1634:
  1527  0004A2  0E00               	movlw	0
  1528  0004A4  6E2F               	movwf	(_dtoa$826+1)^0,c
  1529  0004A6  0E2D               	movlw	45
  1530  0004A8  6E2E               	movwf	_dtoa$826^0,c
  1531  0004AA                     l1636:
  1532  0004AA  0ED0               	movlw	low _dbuf
  1533  0004AC  243E               	addwf	dtoa@i^0,w,c
  1534  0004AE  6ED9               	movwf	fsr2l,c
  1535  0004B0  0E00               	movlw	high _dbuf
  1536  0004B2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1537  0004B4  6EDA               	movwf	fsr2h,c
  1538  0004B6  C02E  FFDF         	movff	_dtoa$826,indf2
  1539  0004BA                     l1638:
  1540                           
  1541                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  1542  0004BA  C01C  F011         	movff	dtoa@fp,pad@fp
  1543  0004BE  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1544  0004C2  0ED0               	movlw	low _dbuf
  1545  0004C4  243E               	addwf	dtoa@i^0,w,c
  1546  0004C6  6E13               	movwf	pad@buf^0,c
  1547  0004C8  0E00               	movlw	high _dbuf
  1548  0004CA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1549  0004CC  6E14               	movwf	(pad@buf+1)^0,c
  1550  0004CE  C032  F015         	movff	dtoa@w,pad@p
  1551  0004D2  C033  F016         	movff	dtoa@w+1,pad@p+1
  1552  0004D6  EC91  F005         	call	_pad	;wreg free
  1553  0004DA  C011  F01C         	movff	?_pad,?_dtoa
  1554  0004DE  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1555  0004E2  0012               	return		;funcret
  1556  0004E4                     __end_of_dtoa:
  1557                           	callstack 0
  1558                           
  1559 ;; *************** function _pad *****************
  1560 ;; Defined at:
  1561 ;;		line 72 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1564 ;;		 -> sprintf@f(6), 
  1565 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1566 ;;		 -> dbuf(32), 
  1567 ;;  p               2   20[COMRAM] int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  w               2   25[COMRAM] int 
  1570 ;;  i               2   23[COMRAM] int 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  2   16[COMRAM] int 
  1573 ;; Registers used:
  1574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1
  1580 ;;      Params:         6       0       0
  1581 ;;      Locals:         4       0       0
  1582 ;;      Temps:          1       0       0
  1583 ;;      Totals:        11       0       0
  1584 ;;Total ram usage:       11 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    3
  1587 ;; This function calls:
  1588 ;;		_fputc
  1589 ;;		_fputs
  1590 ;;		_strlen
  1591 ;; This function is called by:
  1592 ;;		_dtoa
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text6
  1597  000B22                     __ptext6:
  1598                           	callstack 0
  1599  000B22                     _pad:
  1600                           	callstack 22
  1601  000B22                     
  1602                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.20/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  1603  000B22  A077               	btfss	_flags^0,0,c
  1604  000B24  EF96  F005         	goto	u731
  1605  000B28  EF98  F005         	goto	u730
  1606  000B2C                     u731:
  1607  000B2C  EFA2  F005         	goto	l1548
  1608  000B30                     u730:
  1609  000B30                     
  1610                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  1611  000B30  C013  F00A         	movff	pad@buf,fputs@s
  1612  000B34  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1613  000B38  C011  F00C         	movff	pad@fp,fputs@fp
  1614  000B3C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1615  000B40  ECBA  F006         	call	_fputs	;wreg free
  1616  000B44                     l1548:
  1617                           
  1618                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  1619  000B44  BE16               	btfsc	(pad@p+1)^0,7,c
  1620  000B46  EFA7  F005         	goto	u741
  1621  000B4A  EFA9  F005         	goto	u740
  1622  000B4E                     u741:
  1623  000B4E  EFAF  F005         	goto	l1552
  1624  000B52                     u740:
  1625  000B52  C015  F01A         	movff	pad@p,pad@w
  1626  000B56  C016  F01B         	movff	pad@p+1,pad@w+1
  1627  000B5A  EFB3  F005         	goto	l883
  1628  000B5E                     l1552:
  1629  000B5E  0E00               	movlw	0
  1630  000B60  6E1B               	movwf	(pad@w+1)^0,c
  1631  000B62  0E00               	movlw	0
  1632  000B64  6E1A               	movwf	pad@w^0,c
  1633  000B66                     l883:
  1634                           
  1635                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  1636  000B66  0E00               	movlw	0
  1637  000B68  6E19               	movwf	(pad@i+1)^0,c
  1638  000B6A  0E00               	movlw	0
  1639  000B6C  6E18               	movwf	pad@i^0,c
  1640                           
  1641                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1642  000B6E  EFC5  F005         	goto	l1558
  1643  000B72                     l1554:
  1644                           
  1645                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  1646  000B72  0E00               	movlw	0
  1647  000B74  6E02               	movwf	(fputc@c+1)^0,c
  1648  000B76  0E20               	movlw	32
  1649  000B78  6E01               	movwf	fputc@c^0,c
  1650  000B7A  C011  F003         	movff	pad@fp,fputc@fp
  1651  000B7E  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1652  000B82  EC2C  F005         	call	_fputc	;wreg free
  1653  000B86                     
  1654                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 86:         ++i;
  1655  000B86  4A18               	infsnz	pad@i^0,f,c
  1656  000B88  2A19               	incf	(pad@i+1)^0,f,c
  1657  000B8A                     l1558:
  1658                           
  1659                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  1660  000B8A  501A               	movf	pad@w^0,w,c
  1661  000B8C  5C18               	subwf	pad@i^0,w,c
  1662  000B8E  5019               	movf	(pad@i+1)^0,w,c
  1663  000B90  0A80               	xorlw	128
  1664  000B92  6E17               	movwf	??_pad^0,c
  1665  000B94  501B               	movf	(pad@w+1)^0,w,c
  1666  000B96  0A80               	xorlw	128
  1667  000B98  5817               	subwfb	??_pad^0,w,c
  1668  000B9A  A0D8               	btfss	status,0,c
  1669  000B9C  EFD2  F005         	goto	u751
  1670  000BA0  EFD4  F005         	goto	u750
  1671  000BA4                     u751:
  1672  000BA4  EFB9  F005         	goto	l1554
  1673  000BA8                     u750:
  1674  000BA8                     
  1675                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  1676  000BA8  B077               	btfsc	_flags^0,0,c
  1677  000BAA  EFD9  F005         	goto	u761
  1678  000BAE  EFDB  F005         	goto	u760
  1679  000BB2                     u761:
  1680  000BB2  EFE5  F005         	goto	l1562
  1681  000BB6                     u760:
  1682  000BB6                     
  1683                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  1684  000BB6  C013  F00A         	movff	pad@buf,fputs@s
  1685  000BBA  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1686  000BBE  C011  F00C         	movff	pad@fp,fputs@fp
  1687  000BC2  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1688  000BC6  ECBA  F006         	call	_fputs	;wreg free
  1689  000BCA                     l1562:
  1690                           
  1691                           ;/Applications/microchip/xc8/v2.20/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  1692  000BCA  C013  F001         	movff	pad@buf,strlen@s
  1693  000BCE  C014  F002         	movff	pad@buf+1,strlen@s+1
  1694  000BD2  ECFC  F006         	call	_strlen	;wreg free
  1695  000BD6  501A               	movf	pad@w^0,w,c
  1696  000BD8  2401               	addwf	?_strlen^0,w,c
  1697  000BDA  6E11               	movwf	?_pad^0,c
  1698  000BDC  501B               	movf	(pad@w+1)^0,w,c
  1699  000BDE  2002               	addwfc	(?_strlen+1)^0,w,c
  1700  000BE0  6E12               	movwf	(?_pad+1)^0,c
  1701  000BE2  0012               	return		;funcret
  1702  000BE4                     __end_of_pad:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _strlen *****************
  1706 ;; Defined at:
  1707 ;;		line 5 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/strlen.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1710 ;;		 -> dbuf(32), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1713 ;;		 -> dbuf(32), 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2    0[COMRAM] unsigned int 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1
  1723 ;;      Params:         2       0       0
  1724 ;;      Locals:         2       0       0
  1725 ;;      Temps:          0       0       0
  1726 ;;      Totals:         4       0       0
  1727 ;;Total ram usage:        4 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_pad
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text7
  1737  000DF8                     __ptext7:
  1738                           	callstack 0
  1739  000DF8                     _strlen:
  1740                           	callstack 24
  1741  000DF8  C001  F003         	movff	strlen@s,strlen@a
  1742  000DFC  C002  F004         	movff	strlen@s+1,strlen@a+1
  1743  000E00  EF04  F007         	goto	l1454
  1744  000E04                     l1452:
  1745  000E04  4A01               	infsnz	strlen@s^0,f,c
  1746  000E06  2A02               	incf	(strlen@s+1)^0,f,c
  1747  000E08                     l1454:
  1748  000E08  C001  FFD9         	movff	strlen@s,fsr2l
  1749  000E0C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1750  000E10  50DF               	movf	indf2,w,c
  1751  000E12  A4D8               	btfss	status,2,c
  1752  000E14  EF0E  F007         	goto	u591
  1753  000E18  EF10  F007         	goto	u590
  1754  000E1C                     u591:
  1755  000E1C  EF02  F007         	goto	l1452
  1756  000E20                     u590:
  1757  000E20  5003               	movf	strlen@a^0,w,c
  1758  000E22  5C01               	subwf	strlen@s^0,w,c
  1759  000E24  6E01               	movwf	?_strlen^0,c
  1760  000E26  5004               	movf	(strlen@a+1)^0,w,c
  1761  000E28  5802               	subwfb	(strlen@s+1)^0,w,c
  1762  000E2A  6E02               	movwf	(?_strlen+1)^0,c
  1763  000E2C  0012               	return		;funcret
  1764  000E2E                     __end_of_strlen:
  1765                           	callstack 0
  1766                           
  1767 ;; *************** function _fputs *****************
  1768 ;; Defined at:
  1769 ;;		line 8 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/nf_fputs.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1772 ;;		 -> dbuf(32), 
  1773 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1774 ;;		 -> sprintf@f(6), 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  i               2   14[COMRAM] int 
  1777 ;;  c               1   13[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  2    9[COMRAM] int 
  1780 ;; Registers used:
  1781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1
  1787 ;;      Params:         4       0       0
  1788 ;;      Locals:         3       0       0
  1789 ;;      Temps:          0       0       0
  1790 ;;      Totals:         7       0       0
  1791 ;;Total ram usage:        7 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    2
  1794 ;; This function calls:
  1795 ;;		_fputc
  1796 ;; This function is called by:
  1797 ;;		_pad
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text8
  1802  000D74                     __ptext8:
  1803                           	callstack 0
  1804  000D74                     _fputs:
  1805                           	callstack 22
  1806  000D74  0E00               	movlw	0
  1807  000D76  6E10               	movwf	(fputs@i+1)^0,c
  1808  000D78  0E00               	movlw	0
  1809  000D7A  6E0F               	movwf	fputs@i^0,c
  1810  000D7C  EFCB  F006         	goto	l1448
  1811  000D80                     l1444:
  1812  000D80  C00E  F001         	movff	fputs@c,fputc@c
  1813  000D84  6A02               	clrf	(fputc@c+1)^0,c
  1814  000D86  C00C  F003         	movff	fputs@fp,fputc@fp
  1815  000D8A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1816  000D8E  EC2C  F005         	call	_fputc	;wreg free
  1817  000D92  4A0F               	infsnz	fputs@i^0,f,c
  1818  000D94  2A10               	incf	(fputs@i+1)^0,f,c
  1819  000D96                     l1448:
  1820  000D96  500F               	movf	fputs@i^0,w,c
  1821  000D98  240A               	addwf	fputs@s^0,w,c
  1822  000D9A  6ED9               	movwf	fsr2l,c
  1823  000D9C  5010               	movf	(fputs@i+1)^0,w,c
  1824  000D9E  200B               	addwfc	(fputs@s+1)^0,w,c
  1825  000DA0  6EDA               	movwf	fsr2h,c
  1826  000DA2  50DF               	movf	indf2,w,c
  1827  000DA4  6E0E               	movwf	fputs@c^0,c
  1828  000DA6  500E               	movf	fputs@c^0,w,c
  1829  000DA8  A4D8               	btfss	status,2,c
  1830  000DAA  EFD9  F006         	goto	u581
  1831  000DAE  EFDB  F006         	goto	u580
  1832  000DB2                     u581:
  1833  000DB2  EFC0  F006         	goto	l1444
  1834  000DB6                     u580:
  1835  000DB6  0012               	return		;funcret
  1836  000DB8                     __end_of_fputs:
  1837                           	callstack 0
  1838                           
  1839 ;; *************** function _fputc *****************
  1840 ;; Defined at:
  1841 ;;		line 8 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/nf_fputc.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  c               2    0[COMRAM] int 
  1844 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1845 ;;		 -> sprintf@f(6), 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  2    0[COMRAM] int 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1
  1857 ;;      Params:         4       0       0
  1858 ;;      Locals:         0       0       0
  1859 ;;      Temps:          5       0       0
  1860 ;;      Totals:         9       0       0
  1861 ;;Total ram usage:        9 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    1
  1864 ;; This function calls:
  1865 ;;		_putch
  1866 ;; This function is called by:
  1867 ;;		_pad
  1868 ;;		_vfpfcnvrt
  1869 ;;		_fputs
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text9
  1874  000A58                     __ptext9:
  1875                           	callstack 0
  1876  000A58                     _fputc:
  1877                           	callstack 25
  1878  000A58  5003               	movf	fputc@fp^0,w,c
  1879  000A5A  1004               	iorwf	(fputc@fp+1)^0,w,c
  1880  000A5C  B4D8               	btfsc	status,2,c
  1881  000A5E  EF33  F005         	goto	u541
  1882  000A62  EF35  F005         	goto	u540
  1883  000A66                     u541:
  1884  000A66  EF3E  F005         	goto	l1424
  1885  000A6A                     u540:
  1886  000A6A  5003               	movf	fputc@fp^0,w,c
  1887  000A6C  1004               	iorwf	(fputc@fp+1)^0,w,c
  1888  000A6E  A4D8               	btfss	status,2,c
  1889  000A70  EF3C  F005         	goto	u551
  1890  000A74  EF3E  F005         	goto	u550
  1891  000A78                     u551:
  1892  000A78  EF43  F005         	goto	l1426
  1893  000A7C                     u550:
  1894  000A7C                     l1424:
  1895  000A7C  5001               	movf	fputc@c^0,w,c
  1896  000A7E  ECB7  F007         	call	_putch
  1897  000A82  EF90  F005         	goto	l947
  1898  000A86                     l1426:
  1899  000A86  EE20 F004          	lfsr	2,4
  1900  000A8A  5003               	movf	fputc@fp^0,w,c
  1901  000A8C  26D9               	addwf	fsr2l,f,c
  1902  000A8E  5004               	movf	(fputc@fp+1)^0,w,c
  1903  000A90  22DA               	addwfc	fsr2h,f,c
  1904  000A92  50DE               	movf	postinc2,w,c
  1905  000A94  10DE               	iorwf	postinc2,w,c
  1906  000A96  B4D8               	btfsc	status,2,c
  1907  000A98  EF50  F005         	goto	u561
  1908  000A9C  EF52  F005         	goto	u560
  1909  000AA0                     u561:
  1910  000AA0  EF6D  F005         	goto	l1430
  1911  000AA4                     u560:
  1912  000AA4  EE20 F004          	lfsr	2,4
  1913  000AA8  5003               	movf	fputc@fp^0,w,c
  1914  000AAA  26D9               	addwf	fsr2l,f,c
  1915  000AAC  5004               	movf	(fputc@fp+1)^0,w,c
  1916  000AAE  22DA               	addwfc	fsr2h,f,c
  1917  000AB0  EE10 F002          	lfsr	1,2
  1918  000AB4  5003               	movf	fputc@fp^0,w,c
  1919  000AB6  26E1               	addwf	fsr1l,f,c
  1920  000AB8  5004               	movf	(fputc@fp+1)^0,w,c
  1921  000ABA  22E2               	addwfc	fsr1h,f,c
  1922  000ABC  50DE               	movf	postinc2,w,c
  1923  000ABE  5CE6               	subwf	postinc1,w,c
  1924  000AC0  50E6               	movf	postinc1,w,c
  1925  000AC2  0A80               	xorlw	128
  1926  000AC4  6E09               	movwf	(??_fputc+4)^0,c
  1927  000AC6  50DE               	movf	postinc2,w,c
  1928  000AC8  0A80               	xorlw	128
  1929  000ACA  5809               	subwfb	(??_fputc+4)^0,w,c
  1930  000ACC  B0D8               	btfsc	status,0,c
  1931  000ACE  EF6B  F005         	goto	u571
  1932  000AD2  EF6D  F005         	goto	u570
  1933  000AD6                     u571:
  1934  000AD6  EF90  F005         	goto	l947
  1935  000ADA                     u570:
  1936  000ADA                     l1430:
  1937  000ADA  EE20 F002          	lfsr	2,2
  1938  000ADE  5003               	movf	fputc@fp^0,w,c
  1939  000AE0  26D9               	addwf	fsr2l,f,c
  1940  000AE2  5004               	movf	(fputc@fp+1)^0,w,c
  1941  000AE4  22DA               	addwfc	fsr2h,f,c
  1942  000AE6  CFDE F005          	movff	postinc2,??_fputc
  1943  000AEA  CFDD F006          	movff	postdec2,??_fputc+1
  1944  000AEE  C003  FFD9         	movff	fputc@fp,fsr2l
  1945  000AF2  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1946  000AF6  CFDE F007          	movff	postinc2,??_fputc+2
  1947  000AFA  CFDD F008          	movff	postdec2,??_fputc+3
  1948  000AFE  5005               	movf	??_fputc^0,w,c
  1949  000B00  2407               	addwf	(??_fputc+2)^0,w,c
  1950  000B02  6ED9               	movwf	fsr2l,c
  1951  000B04  5006               	movf	(??_fputc+1)^0,w,c
  1952  000B06  2008               	addwfc	(??_fputc+3)^0,w,c
  1953  000B08  6EDA               	movwf	fsr2h,c
  1954  000B0A  C001  FFDF         	movff	fputc@c,indf2
  1955  000B0E  EE20 F002          	lfsr	2,2
  1956  000B12  5003               	movf	fputc@fp^0,w,c
  1957  000B14  26D9               	addwf	fsr2l,f,c
  1958  000B16  5004               	movf	(fputc@fp+1)^0,w,c
  1959  000B18  22DA               	addwfc	fsr2h,f,c
  1960  000B1A  2ADE               	incf	postinc2,f,c
  1961  000B1C  0E00               	movlw	0
  1962  000B1E  22DD               	addwfc	postdec2,f,c
  1963  000B20                     l947:
  1964  000B20  0012               	return		;funcret
  1965  000B22                     __end_of_fputc:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function _putch *****************
  1969 ;; Defined at:
  1970 ;;		line 7 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/putch.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  c               1    wreg     unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  c               1    0[COMRAM] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1
  1984 ;;      Params:         0       0       0
  1985 ;;      Locals:         0       0       0
  1986 ;;      Temps:          0       0       0
  1987 ;;      Totals:         0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_fputc
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text10
  1998  000F6E                     __ptext10:
  1999                           	callstack 0
  2000  000F6E                     _putch:
  2001                           	callstack 25
  2002  000F6E  0012               	return		;funcret
  2003  000F70                     __end_of_putch:
  2004                           	callstack 0
  2005                           
  2006 ;; *************** function _abs *****************
  2007 ;; Defined at:
  2008 ;;		line 1 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/abs.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  a               2   18[COMRAM] int 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2   18[COMRAM] int 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1
  2022 ;;      Params:         2       0       0
  2023 ;;      Locals:         0       0       0
  2024 ;;      Temps:          2       0       0
  2025 ;;      Totals:         4       0       0
  2026 ;;Total ram usage:        4 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_dtoa
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text11
  2036  000DB8                     __ptext11:
  2037                           	callstack 0
  2038  000DB8                     _abs:
  2039                           	callstack 25
  2040  000DB8  BE14               	btfsc	(abs@a+1)^0,7,c
  2041  000DBA  EFE9  F006         	goto	u770
  2042  000DBE  5014               	movf	(abs@a+1)^0,w,c
  2043  000DC0  E106               	bnz	u771
  2044  000DC2  0413               	decf	abs@a^0,w,c
  2045  000DC4  B0D8               	btfsc	status,0,c
  2046  000DC6  EFE7  F006         	goto	u771
  2047  000DCA  EFE9  F006         	goto	u770
  2048  000DCE                     u771:
  2049  000DCE  EFF7  F006         	goto	l932
  2050  000DD2                     u770:
  2051  000DD2  C013  F015         	movff	abs@a,??_abs
  2052  000DD6  C014  F016         	movff	abs@a+1,??_abs+1
  2053  000DDA  1E15               	comf	??_abs^0,f,c
  2054  000DDC  1E16               	comf	(??_abs+1)^0,f,c
  2055  000DDE  4A15               	infsnz	??_abs^0,f,c
  2056  000DE0  2A16               	incf	(??_abs+1)^0,f,c
  2057  000DE2  C015  F013         	movff	??_abs,?_abs
  2058  000DE6  C016  F014         	movff	??_abs+1,?_abs+1
  2059  000DEA  EFFB  F006         	goto	l935
  2060  000DEE                     l932:
  2061  000DEE  C013  F013         	movff	abs@a,?_abs
  2062  000DF2  C014  F014         	movff	abs@a+1,?_abs+1
  2063  000DF6                     l935:
  2064  000DF6  0012               	return		;funcret
  2065  000DF8                     __end_of_abs:
  2066                           	callstack 0
  2067                           
  2068 ;; *************** function ___aomod *****************
  2069 ;; Defined at:
  2070 ;;		line 9 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/aomod.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  dividend        8    0[COMRAM] long long 
  2073 ;;  divisor         8    8[COMRAM] long long 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  sign            1   17[COMRAM] unsigned char 
  2076 ;;  counter         1   16[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  8    0[COMRAM] long long 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1
  2086 ;;      Params:        16       0       0
  2087 ;;      Locals:         2       0       0
  2088 ;;      Temps:          0       0       0
  2089 ;;      Totals:        18       0       0
  2090 ;;Total ram usage:       18 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_dtoa
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text12
  2100  00081E                     __ptext12:
  2101                           	callstack 0
  2102  00081E                     ___aomod:
  2103                           	callstack 25
  2104  00081E  0E00               	movlw	0
  2105  000820  6E12               	movwf	___aomod@sign^0,c
  2106  000822  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2107  000824  EF18  F004         	goto	u670
  2108  000828  EF16  F004         	goto	u671
  2109  00082C                     u671:
  2110  00082C  EF2A  F004         	goto	l1516
  2111  000830                     u670:
  2112  000830  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2113  000832  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2114  000834  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2115  000836  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2116  000838  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2117  00083A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2118  00083C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2119  00083E  6C01               	negf	___aomod@dividend^0,c
  2120  000840  0E00               	movlw	0
  2121  000842  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2122  000844  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2123  000846  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2124  000848  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2125  00084A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2126  00084C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2127  00084E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2128  000850  0E01               	movlw	1
  2129  000852  6E12               	movwf	___aomod@sign^0,c
  2130  000854                     l1516:
  2131  000854  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2132  000856  EF31  F004         	goto	u680
  2133  00085A  EF2F  F004         	goto	u681
  2134  00085E                     u681:
  2135  00085E  EF41  F004         	goto	l1520
  2136  000862                     u680:
  2137  000862  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2138  000864  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2139  000866  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2140  000868  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2141  00086A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2142  00086C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2143  00086E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2144  000870  6C09               	negf	___aomod@divisor^0,c
  2145  000872  0E00               	movlw	0
  2146  000874  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2147  000876  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2148  000878  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2149  00087A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2150  00087C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2151  00087E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2152  000880  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2153  000882                     l1520:
  2154  000882  5009               	movf	___aomod@divisor^0,w,c
  2155  000884  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2156  000886  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2157  000888  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2158  00088A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2159  00088C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2160  00088E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2161  000890  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2162  000892  B4D8               	btfsc	status,2,c
  2163  000894  EF4E  F004         	goto	u691
  2164  000898  EF50  F004         	goto	u690
  2165  00089C                     u691:
  2166  00089C  EF98  F004         	goto	l1536
  2167  0008A0                     u690:
  2168  0008A0  0E01               	movlw	1
  2169  0008A2  6E11               	movwf	___aomod@counter^0,c
  2170  0008A4  EF5E  F004         	goto	l1526
  2171  0008A8                     l1524:
  2172  0008A8  90D8               	bcf	status,0,c
  2173  0008AA  3609               	rlcf	___aomod@divisor^0,f,c
  2174  0008AC  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2175  0008AE  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2176  0008B0  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2177  0008B2  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2178  0008B4  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2179  0008B6  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2180  0008B8  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2181  0008BA  2A11               	incf	___aomod@counter^0,f,c
  2182  0008BC                     l1526:
  2183  0008BC  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2184  0008BE  EF63  F004         	goto	u701
  2185  0008C2  EF65  F004         	goto	u700
  2186  0008C6                     u701:
  2187  0008C6  EF54  F004         	goto	l1524
  2188  0008CA                     u700:
  2189  0008CA                     l1528:
  2190  0008CA  5009               	movf	___aomod@divisor^0,w,c
  2191  0008CC  5C01               	subwf	___aomod@dividend^0,w,c
  2192  0008CE  500A               	movf	(___aomod@divisor+1)^0,w,c
  2193  0008D0  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2194  0008D2  500B               	movf	(___aomod@divisor+2)^0,w,c
  2195  0008D4  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2196  0008D6  500C               	movf	(___aomod@divisor+3)^0,w,c
  2197  0008D8  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2198  0008DA  500D               	movf	(___aomod@divisor+4)^0,w,c
  2199  0008DC  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2200  0008DE  500E               	movf	(___aomod@divisor+5)^0,w,c
  2201  0008E0  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2202  0008E2  500F               	movf	(___aomod@divisor+6)^0,w,c
  2203  0008E4  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2204  0008E6  5010               	movf	(___aomod@divisor+7)^0,w,c
  2205  0008E8  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2206  0008EA  A0D8               	btfss	status,0,c
  2207  0008EC  EF7A  F004         	goto	u711
  2208  0008F0  EF7C  F004         	goto	u710
  2209  0008F4                     u711:
  2210  0008F4  EF8C  F004         	goto	l1532
  2211  0008F8                     u710:
  2212  0008F8  5009               	movf	___aomod@divisor^0,w,c
  2213  0008FA  5E01               	subwf	___aomod@dividend^0,f,c
  2214  0008FC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2215  0008FE  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2216  000900  500B               	movf	(___aomod@divisor+2)^0,w,c
  2217  000902  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2218  000904  500C               	movf	(___aomod@divisor+3)^0,w,c
  2219  000906  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2220  000908  500D               	movf	(___aomod@divisor+4)^0,w,c
  2221  00090A  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2222  00090C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2223  00090E  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2224  000910  500F               	movf	(___aomod@divisor+6)^0,w,c
  2225  000912  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2226  000914  5010               	movf	(___aomod@divisor+7)^0,w,c
  2227  000916  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2228  000918                     l1532:
  2229  000918  90D8               	bcf	status,0,c
  2230  00091A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2231  00091C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2232  00091E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2233  000920  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2234  000922  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2235  000924  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2236  000926  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2237  000928  3209               	rrcf	___aomod@divisor^0,f,c
  2238  00092A  2E11               	decfsz	___aomod@counter^0,f,c
  2239  00092C  EF65  F004         	goto	l1528
  2240  000930                     l1536:
  2241  000930  5012               	movf	___aomod@sign^0,w,c
  2242  000932  B4D8               	btfsc	status,2,c
  2243  000934  EF9E  F004         	goto	u721
  2244  000938  EFA0  F004         	goto	u720
  2245  00093C                     u721:
  2246  00093C  EFB0  F004         	goto	l1540
  2247  000940                     u720:
  2248  000940  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2249  000942  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2250  000944  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2251  000946  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2252  000948  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2253  00094A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2254  00094C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2255  00094E  6C01               	negf	___aomod@dividend^0,c
  2256  000950  0E00               	movlw	0
  2257  000952  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2258  000954  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2259  000956  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2260  000958  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2261  00095A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2262  00095C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2263  00095E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2264  000960                     l1540:
  2265  000960  C001  F001         	movff	___aomod@dividend,?___aomod
  2266  000964  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2267  000968  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2268  00096C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2269  000970  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2270  000974  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2271  000978  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2272  00097C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2273  000980  0012               	return		;funcret
  2274  000982                     __end_of___aomod:
  2275                           	callstack 0
  2276                           
  2277 ;; *************** function ___aodiv *****************
  2278 ;; Defined at:
  2279 ;;		line 9 in file "/Applications/microchip/xc8/v2.20/pic/sources/c99/common/aodiv.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  dividend        8    0[COMRAM] long long 
  2282 ;;  divisor         8    8[COMRAM] long long 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  quotient        8   18[COMRAM] long long 
  2285 ;;  sign            1   17[COMRAM] unsigned char 
  2286 ;;  counter         1   16[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  8    0[COMRAM] long long 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1
  2296 ;;      Params:        16       0       0
  2297 ;;      Locals:        10       0       0
  2298 ;;      Temps:          0       0       0
  2299 ;;      Totals:        26       0       0
  2300 ;;Total ram usage:       26 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_dtoa
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text13
  2310  000696                     __ptext13:
  2311                           	callstack 0
  2312  000696                     ___aodiv:
  2313                           	callstack 25
  2314  000696  0E00               	movlw	0
  2315  000698  6E12               	movwf	___aodiv@sign^0,c
  2316  00069A  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2317  00069C  EF54  F003         	goto	u600
  2318  0006A0  EF52  F003         	goto	u601
  2319  0006A4                     u601:
  2320  0006A4  EF66  F003         	goto	l1472
  2321  0006A8                     u600:
  2322  0006A8  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2323  0006AA  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2324  0006AC  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2325  0006AE  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2326  0006B0  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2327  0006B2  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2328  0006B4  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2329  0006B6  6C09               	negf	___aodiv@divisor^0,c
  2330  0006B8  0E00               	movlw	0
  2331  0006BA  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2332  0006BC  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2333  0006BE  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2334  0006C0  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2335  0006C2  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2336  0006C4  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2337  0006C6  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2338  0006C8  0E01               	movlw	1
  2339  0006CA  6E12               	movwf	___aodiv@sign^0,c
  2340  0006CC                     l1472:
  2341  0006CC  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2342  0006CE  EF6D  F003         	goto	u610
  2343  0006D2  EF6B  F003         	goto	u611
  2344  0006D6                     u611:
  2345  0006D6  EF7F  F003         	goto	l1478
  2346  0006DA                     u610:
  2347  0006DA  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2348  0006DC  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2349  0006DE  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2350  0006E0  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2351  0006E2  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2352  0006E4  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2353  0006E6  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2354  0006E8  6C01               	negf	___aodiv@dividend^0,c
  2355  0006EA  0E00               	movlw	0
  2356  0006EC  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2357  0006EE  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2358  0006F0  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2359  0006F2  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2360  0006F4  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2361  0006F6  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2362  0006F8  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2363  0006FA  0E01               	movlw	1
  2364  0006FC  1A12               	xorwf	___aodiv@sign^0,f,c
  2365  0006FE                     l1478:
  2366  0006FE  EE20  F013         	lfsr	2,___aodiv@quotient
  2367  000702  0E07               	movlw	7
  2368  000704                     u621:
  2369  000704  6ADE               	clrf	postinc2,c
  2370  000706  06E8               	decf	wreg,f,c
  2371  000708  E2FD               	bc	u621
  2372  00070A  5009               	movf	___aodiv@divisor^0,w,c
  2373  00070C  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2374  00070E  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2375  000710  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2376  000712  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2377  000714  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2378  000716  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2379  000718  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2380  00071A  B4D8               	btfsc	status,2,c
  2381  00071C  EF92  F003         	goto	u631
  2382  000720  EF94  F003         	goto	u630
  2383  000724                     u631:
  2384  000724  EFE6  F003         	goto	l1500
  2385  000728                     u630:
  2386  000728  0E01               	movlw	1
  2387  00072A  6E11               	movwf	___aodiv@counter^0,c
  2388  00072C  EFA2  F003         	goto	l1486
  2389  000730                     l1484:
  2390  000730  90D8               	bcf	status,0,c
  2391  000732  3609               	rlcf	___aodiv@divisor^0,f,c
  2392  000734  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2393  000736  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2394  000738  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2395  00073A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2396  00073C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2397  00073E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2398  000740  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2399  000742  2A11               	incf	___aodiv@counter^0,f,c
  2400  000744                     l1486:
  2401  000744  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2402  000746  EFA7  F003         	goto	u641
  2403  00074A  EFA9  F003         	goto	u640
  2404  00074E                     u641:
  2405  00074E  EF98  F003         	goto	l1484
  2406  000752                     u640:
  2407  000752                     l1488:
  2408  000752  90D8               	bcf	status,0,c
  2409  000754  3613               	rlcf	___aodiv@quotient^0,f,c
  2410  000756  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2411  000758  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2412  00075A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2413  00075C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2414  00075E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2415  000760  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2416  000762  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2417  000764  5009               	movf	___aodiv@divisor^0,w,c
  2418  000766  5C01               	subwf	___aodiv@dividend^0,w,c
  2419  000768  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2420  00076A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2421  00076C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2422  00076E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2423  000770  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2424  000772  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2425  000774  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2426  000776  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2427  000778  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2428  00077A  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2429  00077C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2430  00077E  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2431  000780  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2432  000782  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2433  000784  A0D8               	btfss	status,0,c
  2434  000786  EFC7  F003         	goto	u651
  2435  00078A  EFC9  F003         	goto	u650
  2436  00078E                     u651:
  2437  00078E  EFDA  F003         	goto	l1496
  2438  000792                     u650:
  2439  000792  5009               	movf	___aodiv@divisor^0,w,c
  2440  000794  5E01               	subwf	___aodiv@dividend^0,f,c
  2441  000796  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2442  000798  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2443  00079A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2444  00079C  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2445  00079E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2446  0007A0  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2447  0007A2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2448  0007A4  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2449  0007A6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2450  0007A8  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2451  0007AA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2452  0007AC  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2453  0007AE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2454  0007B0  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2455  0007B2  8013               	bsf	___aodiv@quotient^0,0,c
  2456  0007B4                     l1496:
  2457  0007B4  90D8               	bcf	status,0,c
  2458  0007B6  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2459  0007B8  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2460  0007BA  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2461  0007BC  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2462  0007BE  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2463  0007C0  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2464  0007C2  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2465  0007C4  3209               	rrcf	___aodiv@divisor^0,f,c
  2466  0007C6  2E11               	decfsz	___aodiv@counter^0,f,c
  2467  0007C8  EFA9  F003         	goto	l1488
  2468  0007CC                     l1500:
  2469  0007CC  5012               	movf	___aodiv@sign^0,w,c
  2470  0007CE  B4D8               	btfsc	status,2,c
  2471  0007D0  EFEC  F003         	goto	u661
  2472  0007D4  EFEE  F003         	goto	u660
  2473  0007D8                     u661:
  2474  0007D8  EFFE  F003         	goto	l1504
  2475  0007DC                     u660:
  2476  0007DC  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2477  0007DE  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2478  0007E0  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2479  0007E2  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2480  0007E4  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2481  0007E6  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2482  0007E8  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2483  0007EA  6C13               	negf	___aodiv@quotient^0,c
  2484  0007EC  0E00               	movlw	0
  2485  0007EE  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2486  0007F0  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2487  0007F2  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2488  0007F4  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2489  0007F6  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2490  0007F8  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2491  0007FA  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2492  0007FC                     l1504:
  2493  0007FC  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2494  000800  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2495  000804  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2496  000808  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2497  00080C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2498  000810  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2499  000814  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2500  000818  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2501  00081C  0012               	return		;funcret
  2502  00081E                     __end_of___aodiv:
  2503                           	callstack 0
  2504                           
  2505 ;; *************** function _print *****************
  2506 ;; Defined at:
  2507 ;;		line 135 in file "LiquidCrystal.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  chr             2    5[COMRAM] PTR unsigned char 
  2510 ;;		 -> print_int@s_num(80), 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1
  2522 ;;      Params:         2       0       0
  2523 ;;      Locals:         0       0       0
  2524 ;;      Temps:          0       0       0
  2525 ;;      Totals:         2       0       0
  2526 ;;Total ram usage:        2 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    5
  2529 ;; This function calls:
  2530 ;;		_write
  2531 ;; This function is called by:
  2532 ;;		_print_int
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text14
  2537  000E2E                     __ptext14:
  2538                           	callstack 0
  2539  000E2E                     _print:
  2540                           	callstack 24
  2541  000E2E                     
  2542                           ;LiquidCrystal.c: 135:     void print(unsigned char *chr);LiquidCrystal.c: 136:     {;Li
      +                          quidCrystal.c: 137:         while (*chr != '\0')
  2543  000E2E  EF22  F007         	goto	l1720
  2544  000E32                     l1716:
  2545                           
  2546                           ;LiquidCrystal.c: 138:         {;LiquidCrystal.c: 139:             write(*chr);
  2547  000E32  C006  FFD9         	movff	print@chr,fsr2l
  2548  000E36  C007  FFDA         	movff	print@chr+1,fsr2h
  2549  000E3A  50DF               	movf	indf2,w,c
  2550  000E3C  ECB2  F007         	call	_write
  2551  000E40                     
  2552                           ;LiquidCrystal.c: 140:             chr++;
  2553  000E40  4A06               	infsnz	print@chr^0,f,c
  2554  000E42  2A07               	incf	(print@chr+1)^0,f,c
  2555  000E44                     l1720:
  2556                           
  2557                           ;LiquidCrystal.c: 137:         while (*chr != '\0')
  2558  000E44  C006  FFD9         	movff	print@chr,fsr2l
  2559  000E48  C007  FFDA         	movff	print@chr+1,fsr2h
  2560  000E4C  50DF               	movf	indf2,w,c
  2561  000E4E  A4D8               	btfss	status,2,c
  2562  000E50  EF2C  F007         	goto	u1001
  2563  000E54  EF2E  F007         	goto	u1000
  2564  000E58                     u1001:
  2565  000E58  EF19  F007         	goto	l1716
  2566  000E5C                     u1000:
  2567  000E5C  0012               	return		;funcret
  2568  000E5E                     __end_of_print:
  2569                           	callstack 0
  2570                           
  2571 ;; *************** function _write *****************
  2572 ;; Defined at:
  2573 ;;		line 125 in file "LiquidCrystal.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  chr             1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  chr             1    4[COMRAM] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1
  2587 ;;      Params:         0       0       0
  2588 ;;      Locals:         1       0       0
  2589 ;;      Temps:          0       0       0
  2590 ;;      Totals:         1       0       0
  2591 ;;Total ram usage:        1 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    4
  2594 ;; This function calls:
  2595 ;;		_sendData
  2596 ;; This function is called by:
  2597 ;;		_print
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text15
  2602  000F64                     __ptext15:
  2603                           	callstack 0
  2604  000F64                     _write:
  2605                           	callstack 24
  2606                           
  2607                           ;incstack = 0
  2608                           ;write@chr stored from wreg
  2609  000F64  6E05               	movwf	write@chr^0,c
  2610  000F66                     
  2611                           ;LiquidCrystal.c: 125:     void write(unsigned char chr);LiquidCrystal.c: 126:     {;Liq
      +                          uidCrystal.c: 127:         sendData(chr);
  2612  000F66  5005               	movf	write@chr^0,w,c
  2613  000F68  EC98  F007         	call	_sendData
  2614  000F6C  0012               	return		;funcret
  2615  000F6E                     __end_of_write:
  2616                           	callstack 0
  2617                           
  2618 ;; *************** function _sendData *****************
  2619 ;; Defined at:
  2620 ;;		line 417 in file "LiquidCrystal.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  value           1    wreg     unsigned char 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  value           1    3[COMRAM] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1
  2634 ;;      Params:         0       0       0
  2635 ;;      Locals:         1       0       0
  2636 ;;      Temps:          0       0       0
  2637 ;;      Totals:         1       0       0
  2638 ;;Total ram usage:        1 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    3
  2641 ;; This function calls:
  2642 ;;		_send
  2643 ;; This function is called by:
  2644 ;;		_write
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text16
  2649  000F30                     __ptext16:
  2650                           	callstack 0
  2651  000F30                     _sendData:
  2652                           	callstack 24
  2653                           
  2654                           ;incstack = 0
  2655                           ;sendData@value stored from wreg
  2656  000F30  6E04               	movwf	sendData@value^0,c
  2657  000F32                     
  2658                           ;LiquidCrystal.c: 417:     void sendData(unsigned char value);LiquidCrystal.c: 418:     
      +                          {;LiquidCrystal.c: 419:         send(value, 1);
  2659  000F32  0E01               	movlw	1
  2660  000F34  6E02               	movwf	send@mode^0,c
  2661  000F36  5004               	movf	sendData@value^0,w,c
  2662  000F38  EC95  F006         	call	_send
  2663  000F3C  0012               	return		;funcret
  2664  000F3E                     __end_of_sendData:
  2665                           	callstack 0
  2666                           
  2667 ;; *************** function _pin_setup *****************
  2668 ;; Defined at:
  2669 ;;		line 33 in file "LiquidCrystal.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  dp              2    0[COMRAM] PTR volatile struct .
  2672 ;;		 -> PORTA(1), 
  2673 ;;  sp              2    2[COMRAM] PTR volatile struct .
  2674 ;;		 -> PORTD(1), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1
  2686 ;;      Params:         4       0       0
  2687 ;;      Locals:         0       0       0
  2688 ;;      Temps:          0       0       0
  2689 ;;      Totals:         4       0       0
  2690 ;;Total ram usage:        4 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text17
  2700  000EFE                     __ptext17:
  2701                           	callstack 0
  2702  000EFE                     _pin_setup:
  2703                           	callstack 30
  2704  000EFE                     
  2705                           ;LiquidCrystal.c: 33:     void pin_setup(volatile PORTx_t *dp, volatile PORTx_t *sp);Liq
      +                          uidCrystal.c: 34:     {;LiquidCrystal.c: 36:         dataPORT = dp;
  2706  000EFE  C001  F0F0         	movff	pin_setup@dp,_dataPORT
  2707  000F02  C002  F0F1         	movff	pin_setup@dp+1,_dataPORT+1
  2708                           
  2709                           ;LiquidCrystal.c: 39:         signalPORT = sp;
  2710  000F06  C003  F07C         	movff	pin_setup@sp,_signalPORT
  2711  000F0A  C004  F07D         	movff	pin_setup@sp+1,_signalPORT+1
  2712  000F0E  0012               	return		;funcret
  2713  000F10                     __end_of_pin_setup:
  2714                           	callstack 0
  2715                           
  2716 ;; *************** function _noAutoscroll *****************
  2717 ;; Defined at:
  2718 ;;		line 371 in file "LiquidCrystal.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1
  2732 ;;      Params:         0       0       0
  2733 ;;      Locals:         0       0       0
  2734 ;;      Temps:          0       0       0
  2735 ;;      Totals:         0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    4
  2739 ;; This function calls:
  2740 ;;		_sendCommand
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text18
  2747  000F4C                     __ptext18:
  2748                           	callstack 0
  2749  000F4C                     _noAutoscroll:
  2750                           	callstack 26
  2751  000F4C                     
  2752                           ;LiquidCrystal.c: 373:       _displaymode &= ~0x01;
  2753  000F4C  907A               	bcf	__displaymode^0,0,c
  2754  000F4E                     
  2755                           ;LiquidCrystal.c: 374:       sendCommand(0x04 | _displaymode);
  2756  000F4E  507A               	movf	__displaymode^0,w,c
  2757  000F50  0904               	iorlw	4
  2758  000F52  EC9F  F007         	call	_sendCommand
  2759  000F56  0012               	return		;funcret
  2760  000F58                     __end_of_noAutoscroll:
  2761                           	callstack 0
  2762                           
  2763 ;; *************** function _home *****************
  2764 ;; Defined at:
  2765 ;;		line 219 in file "LiquidCrystal.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1
  2779 ;;      Params:         0       0       0
  2780 ;;      Locals:         0       0       0
  2781 ;;      Temps:          0       0       0
  2782 ;;      Totals:         0       0       0
  2783 ;;Total ram usage:        0 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    4
  2786 ;; This function calls:
  2787 ;;		_sendCommand
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text19
  2794  000F10                     __ptext19:
  2795                           	callstack 0
  2796  000F10                     _home:
  2797                           	callstack 26
  2798  000F10                     
  2799                           ;LiquidCrystal.c: 221:         sendCommand(0x02);
  2800  000F10  0E02               	movlw	2
  2801  000F12  EC9F  F007         	call	_sendCommand
  2802  000F16                     
  2803                           ;LiquidCrystal.c: 222:         _delay((unsigned long)((2)*(1000000/4000.0)));
  2804  000F16  0EA6               	movlw	166
  2805  000F18                     u1097:
  2806  000F18  2EE8               	decfsz	wreg,f,c
  2807  000F1A  D7FE               	bra	u1097
  2808  000F1C  D000               	nop2	
  2809  000F1E  0012               	return		;funcret
  2810  000F20                     __end_of_home:
  2811                           	callstack 0
  2812                           
  2813 ;; *************** function _begin *****************
  2814 ;; Defined at:
  2815 ;;		line 55 in file "LiquidCrystal.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  cols            1    wreg     unsigned char 
  2818 ;;  lines           1    4[COMRAM] unsigned char 
  2819 ;;  dotsize         1    5[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  cols            1    7[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1
  2831 ;;      Params:         2       0       0
  2832 ;;      Locals:         1       0       0
  2833 ;;      Temps:          1       0       0
  2834 ;;      Totals:         4       0       0
  2835 ;;Total ram usage:        4 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    5
  2838 ;; This function calls:
  2839 ;;		_clear
  2840 ;;		_displayON
  2841 ;;		_sendCommand
  2842 ;;		_setRowOffsets
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text20
  2849  000BE4                     __ptext20:
  2850                           	callstack 0
  2851  000BE4                     _begin:
  2852                           	callstack 25
  2853                           
  2854                           ;incstack = 0
  2855                           ;begin@cols stored from wreg
  2856  000BE4  6E08               	movwf	begin@cols^0,c
  2857  000BE6                     
  2858                           ;LiquidCrystal.c: 55:     void begin(unsigned char cols, unsigned char lines, unsigned c
      +                          har dotsize);LiquidCrystal.c: 56:     {;LiquidCrystal.c: 60:         _displayfunction = 
      +                          0x10 | 0x00 | 0x00;
  2859  000BE6  0E10               	movlw	16
  2860  000BE8  6E7E               	movwf	__displayfunction^0,c
  2861  000BEA                     
  2862                           ;LiquidCrystal.c: 62:          if (lines > 1)
  2863  000BEA  0E01               	movlw	1
  2864  000BEC  6405               	cpfsgt	begin@lines^0,c
  2865  000BEE  EFFB  F005         	goto	u1011
  2866  000BF2  EFFD  F005         	goto	u1010
  2867  000BF6                     u1011:
  2868  000BF6  EFFE  F005         	goto	l1742
  2869  000BFA                     u1010:
  2870  000BFA                     
  2871                           ;LiquidCrystal.c: 63:         {;LiquidCrystal.c: 64:             _displayfunction |= 0x0
      +                          8;
  2872  000BFA  867E               	bsf	__displayfunction^0,3,c
  2873  000BFC                     l1742:
  2874                           
  2875                           ;LiquidCrystal.c: 67:         _numlines = lines;
  2876  000BFC  C005  F079         	movff	begin@lines,__numlines
  2877  000C00                     
  2878                           ;LiquidCrystal.c: 74:         setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
  2879  000C00  0E40               	movlw	64
  2880  000C02  6E01               	movwf	setRowOffsets@row1^0,c
  2881  000C04  C008  F002         	movff	begin@cols,setRowOffsets@row2
  2882  000C08  5008               	movf	begin@cols^0,w,c
  2883  000C0A  0F40               	addlw	64
  2884  000C0C  6E03               	movwf	setRowOffsets@row3^0,c
  2885  000C0E  0E00               	movlw	0
  2886  000C10  EC6B  F007         	call	_setRowOffsets
  2887  000C14                     
  2888                           ;LiquidCrystal.c: 76:         if (dotsize != 0x00)
  2889  000C14  5006               	movf	begin@dotsize^0,w,c
  2890  000C16  B4D8               	btfsc	status,2,c
  2891  000C18  EF10  F006         	goto	u1021
  2892  000C1C  EF12  F006         	goto	u1020
  2893  000C20                     u1021:
  2894  000C20  EF13  F006         	goto	l1750
  2895  000C24                     u1020:
  2896  000C24                     
  2897                           ;LiquidCrystal.c: 77:             _displayfunction |= 0x04;
  2898  000C24  847E               	bsf	__displayfunction^0,2,c
  2899  000C26                     l1750:
  2900                           
  2901                           ;LiquidCrystal.c: 82:         _delay((unsigned long)((41)*(1000000/4000.0)));
  2902  000C26  0E0E               	movlw	14
  2903  000C28  6E07               	movwf	??_begin^0,c
  2904  000C2A  0E4E               	movlw	78
  2905  000C2C                     u1107:
  2906  000C2C  2EE8               	decfsz	wreg,f,c
  2907  000C2E  D7FE               	bra	u1107
  2908  000C30  2E07               	decfsz	??_begin^0,f,c
  2909  000C32  D7FC               	bra	u1107
  2910  000C34  D000               	nop2	
  2911  000C36                     
  2912                           ;LiquidCrystal.c: 83:         sendCommand(0x20 | _displayfunction);
  2913  000C36  507E               	movf	__displayfunction^0,w,c
  2914  000C38  0920               	iorlw	32
  2915  000C3A  EC9F  F007         	call	_sendCommand
  2916  000C3E                     
  2917                           ;LiquidCrystal.c: 84:         _delay((unsigned long)((5)*(1000000/4000.0)));
  2918  000C3E  0EFA               	movlw	250
  2919  000C40                     u1117:
  2920  000C40  D000               	nop2	
  2921  000C42  2EE8               	decfsz	wreg,f,c
  2922  000C44  D7FD               	bra	u1117
  2923  000C46                     
  2924                           ;LiquidCrystal.c: 85:         sendCommand(0x20 | _displayfunction);
  2925  000C46  507E               	movf	__displayfunction^0,w,c
  2926  000C48  0920               	iorlw	32
  2927  000C4A  EC9F  F007         	call	_sendCommand
  2928  000C4E                     
  2929                           ;LiquidCrystal.c: 86:         _delay((unsigned long)((120)*(1000000/4000000.0)));
  2930  000C4E  0E0A               	movlw	10
  2931  000C50                     u1127:
  2932  000C50  2EE8               	decfsz	wreg,f,c
  2933  000C52  D7FE               	bra	u1127
  2934  000C54                     
  2935                           ;LiquidCrystal.c: 87:         sendCommand(0x20 | _displayfunction);
  2936  000C54  507E               	movf	__displayfunction^0,w,c
  2937  000C56  0920               	iorlw	32
  2938  000C58  EC9F  F007         	call	_sendCommand
  2939  000C5C                     
  2940                           ;LiquidCrystal.c: 105:         sendCommand(0x20 | _displayfunction);
  2941  000C5C  507E               	movf	__displayfunction^0,w,c
  2942  000C5E  0920               	iorlw	32
  2943  000C60  EC9F  F007         	call	_sendCommand
  2944  000C64                     
  2945                           ;LiquidCrystal.c: 109:         _displaycontrol = 0x04 | 0x00 | 0x00;
  2946  000C64  0E04               	movlw	4
  2947  000C66  6E7B               	movwf	__displaycontrol^0,c
  2948  000C68                     
  2949                           ;LiquidCrystal.c: 110:         displayON();
  2950  000C68  ECAC  F007         	call	_displayON	;wreg free
  2951                           
  2952                           ;LiquidCrystal.c: 113:         clear();
  2953  000C6C  EC90  F007         	call	_clear	;wreg free
  2954  000C70                     
  2955                           ;LiquidCrystal.c: 116:         _displaymode = 0x02 | 0x00;
  2956  000C70  0E02               	movlw	2
  2957  000C72  6E7A               	movwf	__displaymode^0,c
  2958  000C74                     
  2959                           ;LiquidCrystal.c: 117:         sendCommand(0x04 | _displaymode);
  2960  000C74  507A               	movf	__displaymode^0,w,c
  2961  000C76  0904               	iorlw	4
  2962  000C78  EC9F  F007         	call	_sendCommand
  2963  000C7C  0012               	return		;funcret
  2964  000C7E                     __end_of_begin:
  2965                           	callstack 0
  2966                           
  2967 ;; *************** function _setRowOffsets *****************
  2968 ;; Defined at:
  2969 ;;		line 241 in file "LiquidCrystal.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  row0            1    wreg     unsigned char 
  2972 ;;  row1            1    0[COMRAM] unsigned char 
  2973 ;;  row2            1    1[COMRAM] unsigned char 
  2974 ;;  row3            1    2[COMRAM] unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  row0            1    3[COMRAM] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1
  2986 ;;      Params:         3       0       0
  2987 ;;      Locals:         1       0       0
  2988 ;;      Temps:          0       0       0
  2989 ;;      Totals:         4       0       0
  2990 ;;Total ram usage:        4 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_begin
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text21
  3000  000ED6                     __ptext21:
  3001                           	callstack 0
  3002  000ED6                     _setRowOffsets:
  3003                           	callstack 29
  3004                           
  3005                           ;incstack = 0
  3006                           ;setRowOffsets@row0 stored from wreg
  3007  000ED6  6E04               	movwf	setRowOffsets@row0^0,c
  3008  000ED8                     
  3009                           ;LiquidCrystal.c: 241:     void setRowOffsets(unsigned char row0, unsigned char row1, un
      +                          signed char row2, unsigned char row3);LiquidCrystal.c: 242:     {;LiquidCrystal.c: 243: 
      +                                  _rowOffsets[0] = row0;
  3010  000ED8  C004  F06D         	movff	setRowOffsets@row0,__rowOffsets
  3011  000EDC                     
  3012                           ;LiquidCrystal.c: 244:         _rowOffsets[1] = row1;
  3013  000EDC  C001  F06E         	movff	setRowOffsets@row1,__rowOffsets+1
  3014  000EE0                     
  3015                           ;LiquidCrystal.c: 245:         _rowOffsets[2] = row2;
  3016  000EE0  C002  F06F         	movff	setRowOffsets@row2,__rowOffsets+2
  3017  000EE4                     
  3018                           ;LiquidCrystal.c: 246:         _rowOffsets[3] = row3;
  3019  000EE4  C003  F070         	movff	setRowOffsets@row3,__rowOffsets+3
  3020  000EE8  0012               	return		;funcret
  3021  000EEA                     __end_of_setRowOffsets:
  3022                           	callstack 0
  3023                           
  3024 ;; *************** function _displayON *****************
  3025 ;; Defined at:
  3026 ;;		line 160 in file "LiquidCrystal.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1
  3040 ;;      Params:         0       0       0
  3041 ;;      Locals:         0       0       0
  3042 ;;      Temps:          0       0       0
  3043 ;;      Totals:         0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    4
  3047 ;; This function calls:
  3048 ;;		_sendCommand
  3049 ;; This function is called by:
  3050 ;;		_begin
  3051 ;;		_display
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text22
  3056  000F58                     __ptext22:
  3057                           	callstack 0
  3058  000F58                     _displayON:
  3059                           	callstack 25
  3060  000F58                     
  3061                           ;LiquidCrystal.c: 162:         _displaycontrol |= 0x04;
  3062  000F58  847B               	bsf	__displaycontrol^0,2,c
  3063  000F5A                     
  3064                           ;LiquidCrystal.c: 163:         sendCommand(0x08 | _displaycontrol);
  3065  000F5A  507B               	movf	__displaycontrol^0,w,c
  3066  000F5C  0908               	iorlw	8
  3067  000F5E  EC9F  F007         	call	_sendCommand
  3068  000F62  0012               	return		;funcret
  3069  000F64                     __end_of_displayON:
  3070                           	callstack 0
  3071                           
  3072 ;; *************** function _clear *****************
  3073 ;; Defined at:
  3074 ;;		line 207 in file "LiquidCrystal.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;		None
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      void 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1
  3088 ;;      Params:         0       0       0
  3089 ;;      Locals:         0       0       0
  3090 ;;      Temps:          0       0       0
  3091 ;;      Totals:         0       0       0
  3092 ;;Total ram usage:        0 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    4
  3095 ;; This function calls:
  3096 ;;		_sendCommand
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;;		_begin
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text23
  3104  000F20                     __ptext23:
  3105                           	callstack 0
  3106  000F20                     _clear:
  3107                           	callstack 26
  3108  000F20                     
  3109                           ;LiquidCrystal.c: 209:         sendCommand(0x01);
  3110  000F20  0E01               	movlw	1
  3111  000F22  EC9F  F007         	call	_sendCommand
  3112  000F26                     
  3113                           ;LiquidCrystal.c: 210:         _delay((unsigned long)((2)*(1000000/4000.0)));
  3114  000F26  0EA6               	movlw	166
  3115  000F28                     u1137:
  3116  000F28  2EE8               	decfsz	wreg,f,c
  3117  000F2A  D7FE               	bra	u1137
  3118  000F2C  D000               	nop2	
  3119  000F2E  0012               	return		;funcret
  3120  000F30                     __end_of_clear:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _sendCommand *****************
  3124 ;; Defined at:
  3125 ;;		line 431 in file "LiquidCrystal.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  value           1    wreg     unsigned char 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  value           1    3[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1
  3139 ;;      Params:         0       0       0
  3140 ;;      Locals:         1       0       0
  3141 ;;      Temps:          0       0       0
  3142 ;;      Totals:         1       0       0
  3143 ;;Total ram usage:        1 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    3
  3146 ;; This function calls:
  3147 ;;		_send
  3148 ;; This function is called by:
  3149 ;;		_begin
  3150 ;;		_displayON
  3151 ;;		_clear
  3152 ;;		_home
  3153 ;;		_noAutoscroll
  3154 ;;		_displayOFF
  3155 ;;		_setCursor
  3156 ;;		_cursor
  3157 ;;		_noCursor
  3158 ;;		_blink
  3159 ;;		_noBlink
  3160 ;;		_scrollDisplayLeft
  3161 ;;		_scrollDisplayRight
  3162 ;;		_leftToRight
  3163 ;;		_rightToLeft
  3164 ;;		_autoscroll
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text24
  3169  000F3E                     __ptext24:
  3170                           	callstack 0
  3171  000F3E                     _sendCommand:
  3172                           	callstack 26
  3173                           
  3174                           ;incstack = 0
  3175                           ;sendCommand@value stored from wreg
  3176  000F3E  6E04               	movwf	sendCommand@value^0,c
  3177  000F40                     
  3178                           ;LiquidCrystal.c: 431:     void sendCommand(unsigned char value);LiquidCrystal.c: 432:  
      +                             {;LiquidCrystal.c: 433:         send(value, 0);
  3179  000F40  0E00               	movlw	0
  3180  000F42  6E02               	movwf	send@mode^0,c
  3181  000F44  5004               	movf	sendCommand@value^0,w,c
  3182  000F46  EC95  F006         	call	_send
  3183  000F4A  0012               	return		;funcret
  3184  000F4C                     __end_of_sendCommand:
  3185                           	callstack 0
  3186                           
  3187 ;; *************** function _send *****************
  3188 ;; Defined at:
  3189 ;;		line 390 in file "LiquidCrystal.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  value           1    wreg     unsigned char 
  3192 ;;  mode            1    1[COMRAM] unsigned char 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;  value           1    2[COMRAM] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1
  3204 ;;      Params:         1       0       0
  3205 ;;      Locals:         1       0       0
  3206 ;;      Temps:          0       0       0
  3207 ;;      Totals:         2       0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    2
  3211 ;; This function calls:
  3212 ;;		_write8bits
  3213 ;; This function is called by:
  3214 ;;		_sendData
  3215 ;;		_sendCommand
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text25
  3220  000D2A                     __ptext25:
  3221                           	callstack 0
  3222  000D2A                     _send:
  3223                           	callstack 24
  3224                           
  3225                           ;incstack = 0
  3226                           ;send@value stored from wreg
  3227  000D2A  6E03               	movwf	send@value^0,c
  3228  000D2C                     
  3229                           ;LiquidCrystal.c: 390:     void send(unsigned char value, unsigned char mode);LiquidCrys
      +                          tal.c: 391:     {;LiquidCrystal.c: 392:         if (mode)
  3230  000D2C  5002               	movf	send@mode^0,w,c
  3231  000D2E  B4D8               	btfsc	status,2,c
  3232  000D30  EF9C  F006         	goto	u781
  3233  000D34  EF9E  F006         	goto	u780
  3234  000D38                     u781:
  3235  000D38  EFA5  F006         	goto	l1574
  3236  000D3C                     u780:
  3237  000D3C                     
  3238                           ;LiquidCrystal.c: 393:             signalPORT->_rs = 1;
  3239  000D3C  C07C  FFD9         	movff	_signalPORT,fsr2l
  3240  000D40  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3241  000D44  80DF               	bsf	indf2,0,c
  3242  000D46  EFAA  F006         	goto	l161
  3243  000D4A                     l1574:
  3244                           
  3245                           ;LiquidCrystal.c: 395:             signalPORT->_rs = 0;
  3246  000D4A  C07C  FFD9         	movff	_signalPORT,fsr2l
  3247  000D4E  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3248  000D52  90DF               	bcf	indf2,0,c
  3249  000D54                     l161:
  3250                           
  3251                           ;LiquidCrystal.c: 398:         signalPORT->_rw = 0;
  3252  000D54  C07C  FFD9         	movff	_signalPORT,fsr2l
  3253  000D58  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3254  000D5C  92DF               	bcf	indf2,1,c
  3255  000D5E                     
  3256                           ;LiquidCrystal.c: 401:         if (_displayfunction & 0x10)
  3257  000D5E  A87E               	btfss	__displayfunction^0,4,c
  3258  000D60  EFB4  F006         	goto	u791
  3259  000D64  EFB6  F006         	goto	u790
  3260  000D68                     u791:
  3261  000D68  EFB9  F006         	goto	l163
  3262  000D6C                     u790:
  3263  000D6C                     
  3264                           ;LiquidCrystal.c: 402:         {;LiquidCrystal.c: 403:             write8bits(value);
  3265  000D6C  5003               	movf	send@value^0,w,c
  3266  000D6E  EC75  F007         	call	_write8bits
  3267  000D72                     l163:
  3268  000D72  0012               	return		;funcret
  3269  000D74                     __end_of_send:
  3270                           	callstack 0
  3271                           
  3272 ;; *************** function _write8bits *****************
  3273 ;; Defined at:
  3274 ;;		line 461 in file "LiquidCrystal.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  value           1    wreg     unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  value           1    0[COMRAM] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1
  3288 ;;      Params:         0       0       0
  3289 ;;      Locals:         1       0       0
  3290 ;;      Temps:          0       0       0
  3291 ;;      Totals:         1       0       0
  3292 ;;Total ram usage:        1 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    1
  3295 ;; This function calls:
  3296 ;;		_pulseEnable
  3297 ;; This function is called by:
  3298 ;;		_send
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text26
  3303  000EEA                     __ptext26:
  3304                           	callstack 0
  3305  000EEA                     _write8bits:
  3306                           	callstack 24
  3307                           
  3308                           ;incstack = 0
  3309                           ;write8bits@value stored from wreg
  3310  000EEA  6E01               	movwf	write8bits@value^0,c
  3311  000EEC                     
  3312                           ;LiquidCrystal.c: 461:     void write8bits(unsigned char value);LiquidCrystal.c: 462:   
      +                            {;LiquidCrystal.c: 463:         dataPORT->_data = value;
  3313  000EEC  C0F0  FFD9         	movff	_dataPORT,fsr2l
  3314  000EF0  C0F1  FFDA         	movff	_dataPORT+1,fsr2h
  3315  000EF4  C001  FFDF         	movff	write8bits@value,indf2
  3316  000EF8                     
  3317                           ;LiquidCrystal.c: 465:         pulseEnable();
  3318  000EF8  EC44  F007         	call	_pulseEnable	;wreg free
  3319  000EFC  0012               	return		;funcret
  3320  000EFE                     __end_of_write8bits:
  3321                           	callstack 0
  3322                           
  3323 ;; *************** function _pulseEnable *****************
  3324 ;; Defined at:
  3325 ;;		line 444 in file "LiquidCrystal.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg, fsr2l, fsr2h
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1
  3339 ;;      Params:         0       0       0
  3340 ;;      Locals:         0       0       0
  3341 ;;      Temps:          0       0       0
  3342 ;;      Totals:         0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_write8bits
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text27
  3353  000E88                     __ptext27:
  3354                           	callstack 0
  3355  000E88                     _pulseEnable:
  3356                           	callstack 24
  3357  000E88                     
  3358                           ;LiquidCrystal.c: 446:         signalPORT->_enable = 0;
  3359  000E88  C07C  FFD9         	movff	_signalPORT,fsr2l
  3360  000E8C  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3361  000E90  94DF               	bcf	indf2,2,c
  3362  000E92                     
  3363                           ;LiquidCrystal.c: 447:         _delay((unsigned long)((1)*(1000000/4000000.0)));
  3364                           ;LiquidCrystal.c: 448:         signalPORT->_enable = 1;
  3365  000E92  C07C  FFD9         	movff	_signalPORT,fsr2l
  3366  000E96  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3367  000E9A  84DF               	bsf	indf2,2,c
  3368  000E9C                     
  3369                           ;LiquidCrystal.c: 449:         _delay((unsigned long)((1)*(1000000/4000000.0)));
  3370                           ;LiquidCrystal.c: 450:         signalPORT->_enable = 0;
  3371  000E9C  C07C  FFD9         	movff	_signalPORT,fsr2l
  3372  000EA0  C07D  FFDA         	movff	_signalPORT+1,fsr2h
  3373  000EA4  94DF               	bcf	indf2,2,c
  3374  000EA6                     
  3375                           ;LiquidCrystal.c: 451:         _delay((unsigned long)((100)*(1000000/4000000.0)));
  3376  000EA6  0E08               	movlw	8
  3377  000EA8                     u1147:
  3378  000EA8  2EE8               	decfsz	wreg,f,c
  3379  000EAA  D7FE               	bra	u1147
  3380  000EAC  F000               	nop	
  3381  000EAE  0012               	return		;funcret
  3382  000EB0                     __end_of_pulseEnable:
  3383                           	callstack 0
  3384                           
  3385                           	psect	rparam
  3386  0000                     
  3387                           	psect	idloc
  3388                           
  3389                           ;Config register IDLOC0 @ 0x200000
  3390                           ;	unspecified, using default values
  3391  200000                     	org	2097152
  3392  200000  FF                 	db	255
  3393                           
  3394                           ;Config register IDLOC1 @ 0x200001
  3395                           ;	unspecified, using default values
  3396  200001                     	org	2097153
  3397  200001  FF                 	db	255
  3398                           
  3399                           ;Config register IDLOC2 @ 0x200002
  3400                           ;	unspecified, using default values
  3401  200002                     	org	2097154
  3402  200002  FF                 	db	255
  3403                           
  3404                           ;Config register IDLOC3 @ 0x200003
  3405                           ;	unspecified, using default values
  3406  200003                     	org	2097155
  3407  200003  FF                 	db	255
  3408                           
  3409                           ;Config register IDLOC4 @ 0x200004
  3410                           ;	unspecified, using default values
  3411  200004                     	org	2097156
  3412  200004  FF                 	db	255
  3413                           
  3414                           ;Config register IDLOC5 @ 0x200005
  3415                           ;	unspecified, using default values
  3416  200005                     	org	2097157
  3417  200005  FF                 	db	255
  3418                           
  3419                           ;Config register IDLOC6 @ 0x200006
  3420                           ;	unspecified, using default values
  3421  200006                     	org	2097158
  3422  200006  FF                 	db	255
  3423                           
  3424                           ;Config register IDLOC7 @ 0x200007
  3425                           ;	unspecified, using default values
  3426  200007                     	org	2097159
  3427  200007  FF                 	db	255
  3428                           
  3429                           	psect	config
  3430                           
  3431                           ; Padding undefined space
  3432  300000                     	org	3145728
  3433  300000  FF                 	db	255
  3434                           
  3435                           ;Config register CONFIG1H @ 0x300001
  3436                           ;	Oscillator
  3437                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  3438                           ;	Fail-Safe Clock Monitor Enable bit
  3439                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3440                           ;	Internal/External Oscillator Switchover bit
  3441                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3442  300001                     	org	3145729
  3443  300001  08                 	db	8
  3444                           
  3445                           ;Config register CONFIG2L @ 0x300002
  3446                           ;	Power-up Timer Enable bit
  3447                           ;	PWRT = OFF, PWRT disabled
  3448                           ;	Brown-out Reset Enable bits
  3449                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3450                           ;	Brown-out Reset Voltage bits
  3451                           ;	BORV = 3, Minimum Setting
  3452  300002                     	org	3145730
  3453  300002  19                 	db	25
  3454                           
  3455                           ;Config register CONFIG2H @ 0x300003
  3456                           ;	Watchdog Timer Enable bit
  3457                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3458                           ;	Watchdog Timer Postscale Select bits
  3459                           ;	WDTPS = 32768, 1:32768
  3460  300003                     	org	3145731
  3461  300003  1E                 	db	30
  3462                           
  3463                           ; Padding undefined space
  3464  300004                     	org	3145732
  3465  300004  FF                 	db	255
  3466                           
  3467                           ;Config register CONFIG3H @ 0x300005
  3468                           ;	CCP2 MUX bit
  3469                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  3470                           ;	PORTB A/D Enable bit
  3471                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  3472                           ;	Low-Power Timer1 Oscillator Enable bit
  3473                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3474                           ;	MCLR Pin Enable bit
  3475                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3476  300005                     	org	3145733
  3477  300005  83                 	db	131
  3478                           
  3479                           ;Config register CONFIG4L @ 0x300006
  3480                           ;	Stack Full/Underflow Reset Enable bit
  3481                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  3482                           ;	Single-Supply ICSP Enable bit
  3483                           ;	LVP = OFF, Single-Supply ICSP disabled
  3484                           ;	Boot Block Size Select bits
  3485                           ;	BBSIZ = BB256, 256 Word
  3486                           ;	Extended Instruction Set Enable bit
  3487                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3488                           ;	Background Debugger Enable bit
  3489                           ;	DEBUG = 0x1, unprogrammed default
  3490  300006                     	org	3145734
  3491  300006  80                 	db	128
  3492                           
  3493                           ; Padding undefined space
  3494  300007                     	org	3145735
  3495  300007  FF                 	db	255
  3496                           
  3497                           ;Config register CONFIG5L @ 0x300008
  3498                           ;	Code Protection bit
  3499                           ;	CP0 = OFF, Block 0 not code-protected
  3500                           ;	Code Protection bit
  3501                           ;	CP1 = OFF, Block 1 not code-protected
  3502  300008                     	org	3145736
  3503  300008  03                 	db	3
  3504                           
  3505                           ;Config register CONFIG5H @ 0x300009
  3506                           ;	Boot Block Code Protection bitProtect Boot
  3507                           ;	CPB = OFF, Boot block not code-protected
  3508                           ;	Data EEPROM Code Protection bit
  3509                           ;	CPD = OFF, Data EEPROM not code-protected
  3510  300009                     	org	3145737
  3511  300009  C0                 	db	192
  3512                           
  3513                           ;Config register CONFIG6L @ 0x30000A
  3514                           ;	Write Protection bit
  3515                           ;	WRT0 = OFF, Block 0 not write-protected
  3516                           ;	Write Protection bit
  3517                           ;	WRT1 = OFF, Block 1 not write-protected
  3518  30000A                     	org	3145738
  3519  30000A  03                 	db	3
  3520                           
  3521                           ;Config register CONFIG6H @ 0x30000B
  3522                           ;	Configuration Register Write Protection bit
  3523                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3524                           ;	Boot Block Write Protection bit
  3525                           ;	WRTB = OFF, Boot block not write-protected
  3526                           ;	Data EEPROM Write Protection bit
  3527                           ;	WRTD = OFF, Data EEPROM not write-protected
  3528  30000B                     	org	3145739
  3529  30000B  E0                 	db	224
  3530                           
  3531                           ;Config register CONFIG7L @ 0x30000C
  3532                           ;	Table Read Protection bit
  3533                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  3534                           ;	Table Read Protection bit
  3535                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  3536  30000C                     	org	3145740
  3537  30000C  03                 	db	3
  3538                           
  3539                           ;Config register CONFIG7H @ 0x30000D
  3540                           ;	Boot Block Table Read Protection bit
  3541                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  3542  30000D                     	org	3145741
  3543  30000D  40                 	db	64
  3544                           tosu	equ	0xFFF
  3545                           tosh	equ	0xFFE
  3546                           tosl	equ	0xFFD
  3547                           stkptr	equ	0xFFC
  3548                           pclatu	equ	0xFFB
  3549                           pclath	equ	0xFFA
  3550                           pcl	equ	0xFF9
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           indf0	equ	0xFEF
  3558                           postinc0	equ	0xFEE
  3559                           postdec0	equ	0xFED
  3560                           preinc0	equ	0xFEC
  3561                           plusw0	equ	0xFEB
  3562                           fsr0h	equ	0xFEA
  3563                           fsr0l	equ	0xFE9
  3564                           wreg	equ	0xFE8
  3565                           indf1	equ	0xFE7
  3566                           postinc1	equ	0xFE6
  3567                           postdec1	equ	0xFE5
  3568                           preinc1	equ	0xFE4
  3569                           plusw1	equ	0xFE3
  3570                           fsr1h	equ	0xFE2
  3571                           fsr1l	equ	0xFE1
  3572                           bsr	equ	0xFE0
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           preinc2	equ	0xFDC
  3577                           plusw2	equ	0xFDB
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         47
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    108     126
    BANK0           128     80     114
    BANK1           244      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 80
		 -> print_int@s_num(BANK0[80]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 80
		 -> print_int@s_num(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S753_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 80
		 -> print_int@s_num(BANK0[80]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 80
		 -> print_int@s_num(BANK0[80]), 

    print@chr	PTR unsigned char  size(2) Largest target is 80
		 -> print_int@s_num(BANK0[80]), 

    pin_setup@sp	PTR volatile struct . size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    signalPORT	PTR volatile struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    pin_setup@dp	PTR volatile struct . size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    dataPORT	PTR volatile struct . size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTA(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_print_int
    _print_int->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _print->_write
    _write->_sendData
    _sendData->_send
    _noAutoscroll->_sendCommand
    _home->_sendCommand
    _begin->_sendCommand
    _begin->_setRowOffsets
    _displayON->_sendCommand
    _clear->_sendCommand
    _sendCommand->_send
    _send->_write8bits

Critical Paths under _main in BANK0

    _main->_print_int

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9423
                                            105 COMRAM     3     3      0
                              _begin
                              _clear
                               _home
                       _noAutoscroll
                          _pin_setup
                          _print_int
 ---------------------------------------------------------------------------------
 (1) _print_int                                           82    80      2    7139
                                            103 COMRAM     2     0      2
                                              0 BANK0     80    80      0
                              _print
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16    10      6    6456
                                             87 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _print                                                2     0      2     383
                                              5 COMRAM     2     0      2
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                1     1      0     262
                                              4 COMRAM     1     1      0
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                             1     1      0     240
                                              3 COMRAM     1     1      0
                               _send
 ---------------------------------------------------------------------------------
 (1) _pin_setup                                            4     0      4     196
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _noAutoscroll                                         0     0      0     240
                        _sendCommand
 ---------------------------------------------------------------------------------
 (1) _home                                                 0     0      0     240
                        _sendCommand
 ---------------------------------------------------------------------------------
 (1) _begin                                                4     2      2    1298
                                              4 COMRAM     4     2      2
                              _clear
                          _displayON
                        _sendCommand
                      _setRowOffsets
 ---------------------------------------------------------------------------------
 (2) _setRowOffsets                                        4     1      3     316
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _displayON                                            0     0      0     240
                        _sendCommand
 ---------------------------------------------------------------------------------
 (1) _clear                                                0     0      0     240
                        _sendCommand
 ---------------------------------------------------------------------------------
 (2) _sendCommand                                          1     1      0     240
                                              3 COMRAM     1     1      0
                               _send
 ---------------------------------------------------------------------------------
 (5) _send                                                 2     1      1     218
                                              1 COMRAM     2     1      1
                         _write8bits
 ---------------------------------------------------------------------------------
 (6) _write8bits                                           1     1      0      22
                                              0 COMRAM     1     1      0
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (7) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _begin
     _clear
       _sendCommand
         _send
           _write8bits
             _pulseEnable
     _displayON
       _sendCommand
         _send
           _write8bits
             _pulseEnable
     _sendCommand
       _send
         _write8bits
           _pulseEnable
     _setRowOffsets
   _clear
     _sendCommand
       _send
         _write8bits
           _pulseEnable
   _home
     _sendCommand
       _send
         _write8bits
           _pulseEnable
   _noAutoscroll
     _sendCommand
       _send
         _write8bits
           _pulseEnable
   _pin_setup
   _print_int
     _print
       _write
         _sendData
           _send
             _write8bits
               _pulseEnable
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F3      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1            F4      0       0       5        0.0%
BANK1               F4      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     50      72       4       89.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6C      7E       1       99.2%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0       7        0.0%
DATA                 0      0      F0       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jul 19 23:44:36 2022

                     l90 0C7C                       l85 0F0E                       l93 0F6C  
                     l99 0E5C                      l102 0E86                      l120 0F1E  
                    l105 0F62                      l123 0EE8                      l117 0F2E  
                    l161 0D54                      l305 0980                      l163 0D72  
                    l172 0EAE                      l157 0F56                      l166 0F3C  
                    l175 0EFC                      l169 0F4A                      l292 081C  
                    l921 0694                      l914 04E2                      l932 0DEE  
                    l935 0DF6                      l927 0CD2                      l928 0CDA  
                    l856 0D28                      l947 0B20                      l955 0DB6  
                    l883 0B66                      l964 0E2C                      l958 0F6E  
                    l886 0BA8                      l894 02A4                      l888 0BE2  
                    l896 02AC                      u600 06A8                      u601 06A4  
                    u610 06DA                      u611 06D6                      u700 08CA  
                    u540 0A6A                      u621 0704                      u701 08C6  
                    u541 0A66                      u630 0728                      u710 08F8  
                    u550 0A7C                      u631 0724                      u711 08F4  
                    u551 0A78                      u640 0752                      u720 0940  
                    u560 0AA4                      u800 0236                      u641 074E  
                    u721 093C                      u561 0AA0                      u801 0230  
                    u650 0792                      u570 0ADA                      u730 0B30  
                    u810 0238                      u651 078E                      u571 0AD6  
                    u731 0B2C                      u660 07DC                      u580 0DB6  
                    u740 0B52                      u900 0450                      u820 024E  
                    u661 07D8                      u581 0DB2                      u741 0B4E  
                    u901 044C                      u821 024A                      u670 0830  
                    u590 0E20                      u750 0BA8                      u910 045E  
                    u830 027C                      u671 082C                      u591 0E1C  
                    u751 0BA4                      u911 045A                      u831 0278  
                    u680 0862                      u760 0BB6                      u920 0470  
                    u840 0298                      u681 085E                      u761 0BB2  
                    u921 046C                      u841 0294                      u690 08A0  
                    u770 0DD2                      u930 047E                      u850 02C6  
                    u691 089C                      u771 0DCE                      u931 047A  
                    u851 02C2                      u780 0D3C                      u940 0496  
                    u860 02D4                      u781 0D38                      u941 0492  
                    u861 02D0                      u790 0D6C                      u870 03FE  
                    u950 0508                      u791 0D68                      u871 03FA  
                    u951 0504                      u880 041C                      u960 054E  
                    u881 0418                      u961 054A                      u890 0436  
                    u970 0572                      u891 0432                      u971 056E  
                    u980 0616                      u981 0612                      u990 0CD2  
                    u991 0CCE                      _abs 0DB8                      _pad 0B22  
                    wreg 000FE8                     ?_abs 0013                     l1500 07CC  
                   l1420 0A58                     l1502 07DC                     l1510 0822  
                   l1430 0ADA                     l1422 0A6A                     l1440 0EA6  
                   l1504 07FC                     l1520 0882                     l1512 0830  
                   l1424 0A7C                     l1600 02DA                     l1434 0E88  
                   l1530 08F8                     l1522 08A0                     l1514 0850  
                   l1426 0A86                     l1442 0D74                     l1450 0DF8  
                   l1610 037A                     l1602 02E2                     l1436 0E92  
                   l1460 0EEC                     l1700 0F26                     l1540 0960  
                   l1532 0918                     l1524 08A8                     l1516 0854  
                   l1508 081E                     l1428 0AA4                     l1444 0D80  
                   l1452 0E04                     l1620 0436                     l1612 0380  
                   l1604 02EC                     l1438 0E9C                     l1462 0EF8  
                   l1710 0F58                     l1702 0ED8                     l1470 06C8  
                   l1534 092A                     l1526 08BC                     l1518 0862  
                   l1446 0D92                     l1454 0E08                     l1550 0B52  
                   l1630 0484                     l1622 0450                     l1606 02F2  
                   l1614 03E4                     l1712 0F5A                     l1704 0EDC  
                   l1720 0E44                     l1480 070A                     l1472 06CC  
                   l1464 0696                     l1528 08CA                     l1536 0930  
                   l1448 0D96                     l1456 0E20                     l1560 0BB6  
                   l1552 0B5E                     l1544 0B22                     l1632 0496  
                   l1616 03FE                     l1624 045E                     l1608 0374  
                   l1800 09C0                     l1570 0D2C                     l1706 0EE0  
                   l1642 0F32                     l1714 0E2E                     l1490 0764  
                   l1482 0728                     l1474 06DA                     l1466 069A  
                   l1538 0940                     l1562 0BCA                     l1554 0B72  
                   l1546 0B30                     l1634 04A2                     l1626 0470  
                   l1618 041C                     l1650 0526                     l1730 0D18  
                   l1722 0CDC                     l1802 09CE                     l1810 09F2  
                   l1572 0D3C                     l1708 0EE4                     l1740 0BFA  
                   l1716 0E32                     l1492 0792                     l1484 0730  
                   l1476 06FA                     l1468 06A8                     l1556 0B86  
                   l1548 0B44                     l1636 04AA                     l1628 047E  
                   l1580 0206                     l1652 052A                     l1644 04E4  
                   l1724 0CEC                     l1812 0A00                     l1820 0A26  
                   l1804 09D2                     l1574 0D4A                     l1750 0C26  
                   l1742 0BFC                     l1734 0EFE                     l1718 0E40  
                   l1494 07B2                     l1486 0744                     l1478 06FE  
                   l1566 0DB8                     l1558 0B8A                     l1638 04BA  
                   l1590 027E                     l1582 0226                     l1662 05F2  
                   l1654 054E                     l1646 0508                     l1726 0CF4  
                   l1822 0A34                     l1814 0A04                     l1806 09D6  
                   l1576 0D5E                     l1760 0C54                     l1752 0C36  
                   l1744 0C00                     l1736 0BE6                     l1496 07B4  
                   l1488 0752                     l1568 0DD2                     l1592 0298  
                   l1584 024E                     l1680 0682                     l1664 0616  
                   l1672 0644                     l1656 0572                     l1648 0516  
                   l1728 0CFC                     l1824 0A38                     l1816 0A0A  
                   l1808 09E2                     l1578 0D6C                     l1770 0C74  
                   l1762 0C5C                     l1754 0C3E                     l1746 0C14  
                   l1738 0BEA                     l1498 07C6                     l1594 02B4  
                   l1586 026E                     l1674 0652                     l1666 0624  
                   l1658 05BA                     l1690 0C7E                     l1826 0A40  
                   l1818 0A16                     l1764 0C64                     l1756 0C46  
                   l1748 0C24                     l1780 0F10                     l1772 0F4C  
                   l1596 02C6                     l1588 027C                     l1668 0638  
                   l1692 0C86                     l1828 0A4C                     l1686 0F40  
                   l1766 0C68                     l1758 0C4E                     l1782 0F16  
                   l1774 0F4E                     l1598 02D4                     l1678 065E  
                   l1694 0C92                     l1790 098E                     l1768 0C70  
                   l1688 0F66                     l1696 0CB6                     l1776 0E5E  
                   l1792 09A2                     l1698 0F20                     l1778 0E7A  
                   l1794 09B0                     l1796 09B4                     l1788 0982  
                   l1798 09B8                     ?_pad 0011                     STR_1 0201  
                   u1000 0E5C                     u1001 0E58                     u1010 0BFA  
                   u1011 0BF6                     u1020 0C24                     u1021 0C20  
                   u1030 09CE                     u1031 09CA                     u1040 0A00  
                   u1041 09FC                     u1050 0A34                     u1107 0C2C  
                   u1051 0A30                     u1117 0C40                     u1127 0C50  
                   u1137 0F28                     u1147 0EA8                     u1077 09E8  
                   u1087 0A1C                     u1097 0F18                     abs@a 0013  
                   _dbuf 00D0                     _main 0982                     _dtoa 0206  
                   _home 0F10                     _send 0D2A                     _prec 0075  
                   _nout 0071                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0000             print_int@num 0068             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 0017          __end_of___aodiv 081E  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0982  
                  ?_home 0001                    ?_send 0002            ?_noAutoscroll 0001  
           vfpfcnvrt@fmt 0042                    _PORTA 000F80                    _PORTD 000F83  
                  _TRISA 000F92                    _TRISD 000F95                    _begin 0BE4  
                  _clear 0F20                    _flags 0077                    _fputc 0A58  
                  _fputs 0D74                    _print 0E2E                    pad@fp 0011  
                  _width 0073                    _putch 0F6E                    main@n 006B  
                  dtoa@d 001E                    dtoa@i 003E                    dtoa@n 0036  
                  dtoa@p 0030                    dtoa@s 0034                    dtoa@w 0032  
                  _write 0F64                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0D2A          __initialization 0EB0             __end_of_main 0A58  
           __end_of_dtoa 04E4             __end_of_home 0F20             __end_of_send 0D74  
           ?_sendCommand 0001                   ??_main 006A                   ??_dtoa 0026  
                 ??_home 0005                   ??_send 0003           ??_noAutoscroll 0005  
          __activetblptr 000001                   ?_begin 0005                   ?_clear 0001  
                 _ADCON1 000FC1    __end_of_setRowOffsets 0EEA                   ?_fputc 0001  
                 ?_fputs 000A                   ?_print 0006                   ?_putch 0001  
                 ?_write 0001             __displaymode 007A             vfprintf@cfmt 0056  
              ??___aodiv 0011                ??___aomod 0011                   clear_0 0EB6  
                 clear_1 0EC2                   pad@buf 0013         __end_of_sendData 0F3E  
                 dtoa@fp 001C                   _strlen 0DF8                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 0CDC  
              ??_sprintf 005E               __accesstop 0080  __end_of__initialization 0EC8  
          sendData@value 0004            ___rparam_used 000001           print_int@s_num 0080  
           ?_pulseEnable 0001           __pcstackCOMRAM 0001            __end_of_begin 0C7E  
          __end_of_clear 0F30            __end_of_fputc 0B22            __end_of_fputs 0DB8  
          __end_of_print 0E5E            __end_of_putch 0F70            __end_of_write 0F6E  
                ??_begin 0007                  ??_clear 0005       __size_of_displayON 000C  
                ??_fputc 0005                  ??_fputs 000E                  ??_print 0008  
                ??_putch 0001                  ??_write 0005               __pbssBANK0 00D0  
             __pnvCOMRAM 007C     __end_of_noAutoscroll 0F58       __size_of_pin_setup 0012  
                ?_strlen 0001     __size_of_sendCommand 000E       __size_of_print_int 002A  
     __size_of_vfpfcnvrt 01B2              pin_setup@dp 0001              pin_setup@sp 0003  
             begin@lines 0005                ?_sendData 0001                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0696        __end_of_displayON 0F64  
                ___aomod 081E                ?_vfprintf 0050             __psmallconst 0200  
                __pcinit 0EB0                  __ramtop 0200                  __ptext0 0982  
                __ptext1 0E5E                  __ptext2 0CDC                  __ptext3 0C7E  
                __ptext4 04E4                  __ptext5 0206                  __ptext6 0B22  
                __ptext7 0DF8                  __ptext8 0D74                  __ptext9 0A58  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C2  
        __displaycontrol 007B                  _sprintf 0CDC     end_of_initialization 0EC8  
      __end_of_pin_setup 0F10                  fputc@fp 0003                  fputs@fp 000C  
             ??_sendData 0004               _signalPORT 007C        __end_of_print_int 0E88  
      __end_of_vfpfcnvrt 0696                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE     __size_of_pulseEnable 0028  
             ??_vfprintf 0056                  strlen@a 0003                  strlen@s 0001  
              _PORTCbits 000F82          write8bits@value 0001    __size_of_noAutoscroll 000C  
           begin@dotsize 0006         sendCommand@value 0004               _write8bits 0EEA  
 __size_of_setRowOffsets 0014              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 0048             _noAutoscroll 0F4C           __end_of_strlen 0E2E  
    start_initialization 0EB0              __end_of_abs 0DF8              __end_of_pad 0BE4  
            vfprintf@fmt 0052                 ??_strlen 0003              __pbssCOMRAM 006D  
          __pcstackBANK0 0080         ___aodiv@dividend 0001            _setRowOffsets 0ED6  
              __pnvBANK0 00F0        __size_of_sendData 000E              ?_write8bits 0001  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
              __numlines 0079            ??_sendCommand 0004                _displayON 0F58  
      __size_of_vfprintf 005E                begin@cols 0008              __smallconst 0200  
         __size_of_begin 009A              __rowOffsets 006D           __size_of_clear 0010  
         ?_setRowOffsets 0001                 ?_sprintf 0058           __size_of_fputc 00CA  
         __size_of_fputs 0044           __size_of_print 0030           __size_of_putch 0002  
         __size_of_write 000A                _pin_setup 0EFE                _print_int 0E5E  
              _vfpfcnvrt 04E4               ?_displayON 0001      __end_of_sendCommand 0F4C  
    __size_of_write8bits 0014               ?_pin_setup 0001                 __Hrparam 0000  
          ??_pulseEnable 0001               vfprintf@ap 0054                 __Lrparam 0000  
             vfprintf@fp 0050             __Lsmallconst 0200         __size_of___aodiv 0188  
       __size_of___aomod 0164               ?_print_int 0068               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011                 _dataPORT 00F0  
             sprintf@fmt 005A                send@value 0003          ??_setRowOffsets 0004  
               _dtoa$826 002E                 __ptext10 0F6E                 __ptext11 0DB8  
               __ptext20 0BE4                 __ptext12 081E                 __ptext21 0ED6  
               __ptext13 0696                 __ptext22 0F58                 __ptext14 0E2E  
               __ptext23 0F20                 __ptext15 0F64                 __ptext24 0F3E  
               __ptext16 0F30                 __ptext25 0D2A                 __ptext17 0EFE  
               __ptext26 0EEA                 __ptext18 0F4C                 __ptext27 0E88  
               __ptext19 0F10         __size_of_sprintf 004E            __size_of_main 00D6  
          __size_of_dtoa 02DE            __size_of_home 0010            __size_of_send 004A  
               _sendData 0F30         __displayfunction 007E                 _vfprintf 0C7E  
            _sendCommand 0F3E      __end_of_pulseEnable 0EB0              ??_displayON 0005  
       ___aomod@dividend 0001                sprintf@ap 0060                 send@mode 0002  
      setRowOffsets@row0 0004        setRowOffsets@row1 0001        setRowOffsets@row2 0002  
      setRowOffsets@row3 0003              ??_pin_setup 0005             ??_write8bits 0001  
               print@chr 0006          ___aomod@divisor 0009              ??_print_int 006A  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011                 sprintf@f 0062  
               sprintf@s 0058                 write@chr 0005             ___aodiv@sign 0012  
     __end_of_write8bits 0EFE             ___aomod@sign 0012              _pulseEnable 0E88  
